cscope 15 $HOME/github/google/ngx_google -q 0000003880 0000225073
	@/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_filter_module.h

9 #i‚de‡
_NGX_HTTP_GOOGLE_FILTER_MODULE_H


10 
	#_NGX_HTTP_GOOGLE_FILTER_MODULE_H


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

16 
	~<as£π.h
>

18 
	#NGX_HTTP_GOOGLE_FILTER_MODULE_VERSION
 "0.1.9"

	)

21 
	mngx_hâp_googÀ_ty≥_maö
 = 0,

22 
	mngx_hâp_googÀ_ty≥_vîify
,

23 
	mngx_hâp_googÀ_ty≥_schﬁ¨
,

24 
	mngx_hâp_googÀ_ty≥_ªdúe˘
,

25 } 
	tngx_hâp_googÀ_ty≥_t
;

28 
ngx_°r_t
 
	mœnguage
;

29 
ngx_Êag_t
 
	míabÀ
, 
	mrobŸs
, 
	mschﬁ¨
;

30 
ngx_¨øy_t
 * 
	ms¶off
;

31 } 
	tngx_hâp_googÀ_loc_c⁄f_t
;

34 
ngx_öt_t
 
	míabÀ
;

35 
ngx_hâp_ouçut_body_fûãr_±
 
	m√xt_body_fûãr
;

36 
ngx_hâp_ouçut_hódî_fûãr_±
 
	m√xt_hódî_fûãr
;

37 } 
	tngx_hâp_googÀ_maö_c⁄f_t
;

40 
ngx_öt_t
 
	ms¶
, 
	mn¸
, 
	mrobŸs
;

41 
ngx_°r_t
 * 
	mdomaö
, * 
	mho°
, * 
	m∑ss
, * 
	mœng
, * 
	mc⁄f
, * 
	muri
, * 
	m¨g
;

42 
ngx_¨øy_t
 * 
	m¨gs
, * 
	mcookõs
;

43 
ngx_hâp_googÀ_ty≥_t
 
	mty≥
;

44 } 
	tngx_hâp_googÀ_˘x_t
;

46 
ngx_moduÀ_t
 
ngx_hâp_googÀ_fûãr_moduÀ
;

	@/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_inject.h

9 #i‚de‡
_NGX_HTTP_GOOGLE_INJECT_H


10 
	#_NGX_HTTP_GOOGLE_INJECT_H


	)

12 
	~"ngx_hâp_googÀ_fûãr_moduÀ.h
"

14 * 
ngx_hâp_googÀ_öje˘_subs
 (
ngx_c⁄f_t
 *);

15 * 
ngx_hâp_googÀ_öje˘_¥oxy
(
ngx_c⁄f_t
 *);

	@/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_request.h

9 #i‚de‡
_NGX_HTTP_GOOGLE_REQUEST_H


10 
	#_NGX_HTTP_GOOGLE_REQUEST_H


	)

12 
	~"ngx_hâp_googÀ_fûãr_moduÀ.h
"

14 
ngx_öt_t


15 
ngx_hâp_googÀ_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 * 
r
);

	@/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_response.h

9 #i‚de‡
_NGX_HTTP_GOOGLE_RESPONSE_H


10 
	#_NGX_HTTP_GOOGLE_RESPONSE_H


	)

12 
	~"ngx_hâp_googÀ_fûãr_moduÀ.h
"

14 
ngx_öt_t


15 
ngx_hâp_googÀ_ª•⁄£_hódî_fûãr
(
ngx_hâp_ªque°_t
 * 
r
);

17 
ngx_öt_t


18 
ngx_hâp_googÀ_ª•⁄£_body_fûãr
(
ngx_hâp_ªque°_t
 *, 
ngx_chaö_t
 *);

	@/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_util.h

9 #i‚de‡
_NGX_HTTP_GOOGLE_UTIL_H


10 
	#_NGX_HTTP_GOOGLE_UTIL_H


	)

12 
	~"ngx_hâp_googÀ_fûãr_moduÀ.h
"

14 
ngx_°r_t


15 
ngx_hâp_googÀ_åim
(* 
°r
, 
size_t
 
Àn
);

17 
ngx_¨øy_t
 *

18 
ngx_hâp_googÀ_ex∂ode
(
ngx_hâp_ªque°_t
 * 
r
,

19 
ngx_°r_t
 * 
v
,

20 c⁄° * 
de
);

22 
ngx_°r_t
 *

23 
ngx_hâp_googÀ_im∂ode
(
ngx_hâp_ªque°_t
 * 
r
,

24 
ngx_¨øy_t
 * 
a
,

25 c⁄° * 
de
);

27 
ngx_¨øy_t
 *

28 
ngx_hâp_googÀ_ex∂ode_kv
(
ngx_hâp_ªque°_t
 * 
r
,

29 
ngx_°r_t
 * 
v
,

30 c⁄° * 
de
);

32 
ngx_°r_t
 *

33 
ngx_hâp_googÀ_im∂ode_kv
(
ngx_hâp_ªque°_t
 * 
r
,

34 
ngx_¨øy_t
 * 
a
,

35 c⁄° * 
de
);

37 
ngx_öt_t


38 
ngx_hâp_googÀ_debug
(
ngx_poﬁ_t
 * 
poﬁ
, c⁄° * 
fmt
, ...);

	@/home/wuhong/github/google/ngx_google/src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1007008

	)

13 
	#NGINX_VERSION
 "1.7.8"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 #ifde‡
NGX_BUILD


17 
	#NGINX_VER_BUILD
 
NGINX_VER
 " (" 
NGX_BUILD
 ")"

	)

19 
	#NGINX_VER_BUILD
 
NGINX_VER


	)

22 
	#NGINX_VAR
 "NGINX"

	)

23 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@/home/wuhong/github/google/ngx_google/src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

22 } 
	tngx_¨øy_t
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@/home/wuhong/github/google/ngx_google/src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 #i‡(
NGX_HAVE_FILE_AIO
)

76 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

77 
	tngx_fûe_t
 *
	tfûe
);

80 
	sngx_ouçut_chaö_˘x_s
 {

81 
ngx_buf_t
 *
buf
;

82 
ngx_chaö_t
 *
ö
;

83 
ngx_chaö_t
 *
‰ì
;

84 
ngx_chaö_t
 *
busy
;

86 
£ndfûe
:1;

87 
dúe˘io
:1;

88 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

89 
u«lig√d
:1;

91 
√ed_ö_mem‹y
:1;

92 
√ed_ö_ãmp
:1;

93 #i‡(
NGX_HAVE_FILE_AIO
)

94 
aio
:1;

96 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

99 
off_t
 
Æignmít
;

101 
ngx_poﬁ_t
 *
poﬁ
;

102 
ngx_öt_t
 
Æloˇãd
;

103 
ngx_bufs_t
 
bufs
;

104 
ngx_buf_èg_t
 
èg
;

106 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

107 *
fûãr_˘x
;

112 
ngx_chaö_t
 *
out
;

113 
ngx_chaö_t
 **
œ°
;

114 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 
off_t
 
limô
;

117 } 
	tngx_chaö_wrôî_˘x_t
;

120 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

123 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

124 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

126 
	#ngx_buf_•ecül
(
b
) \

127 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

128 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

130 
	#ngx_buf_sync_⁄ly
(
b
) \

131 (
b
->
sync
 \

132 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

134 
	#ngx_buf_size
(
b
) \

135 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

136 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

138 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

139 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

142 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

143 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

145 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

146 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

147 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

148 
poﬁ
->
chaö
 = 
˛


	)

152 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

153 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

155 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

156 
ngx_chaö_t
 *
ö
);

157 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

158 
	`ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,

159 
ngx_chaö_t
 **
busy
,Çgx_chaö_à**
out
, 
ngx_buf_èg_t
 
èg
);

161 
off_t
 
	`ngx_chaö_cﬂÀs˚_fûe
(
ngx_chaö_t
 **
ö
, off_à
limô
);

163 
ngx_chaö_t
 *
	`ngx_chaö_upd©e_£¡
“gx_chaö_à*
ö
, 
off_t
 
£¡
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_CONF_FILE_H_INCLUDED_


9 
	#_NGX_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

48 
	#NGX_CONF_MULTI
 0x00000000

	)

50 
	#NGX_DIRECT_CONF
 0x00010000

	)

52 
	#NGX_MAIN_CONF
 0x01000000

	)

53 
	#NGX_ANY_CONF
 0x0F000000

	)

57 
	#NGX_CONF_UNSET
 -1

	)

58 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

59 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

60 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

61 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

64 
	#NGX_CONF_OK
 
NULL


	)

65 
	#NGX_CONF_ERROR
 (*Ë-1

	)

67 
	#NGX_CONF_BLOCK_START
 1

	)

68 
	#NGX_CONF_BLOCK_DONE
 2

	)

69 
	#NGX_CONF_FILE_DONE
 3

	)

71 
	#NGX_CORE_MODULE
 0x45524F43

	)

72 
	#NGX_CONF_MODULE
 0x464E4F43

	)

75 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

78 
	sngx_comm™d_s
 {

79 
ngx_°r_t
 
	m«me
;

80 
ngx_uöt_t
 
	mty≥
;

81 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

82 
ngx_uöt_t
 
	mc⁄f
;

83 
ngx_uöt_t
 
	moff£t
;

84 *
	mpo°
;

87 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

90 
	sngx_›í_fûe_s
 {

91 
ngx_fd_t
 
	mfd
;

92 
ngx_°r_t
 
	m«me
;

94 (*
	mÊush
)(
ngx_›í_fûe_t
 *
	mfûe
, 
ngx_log_t
 *
	mlog
);

95 *
	md©a
;

99 
	#NGX_MODULE_V1
 0, 0, 0, 0, 0, 0, 1

	)

100 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

102 
	sngx_moduÀ_s
 {

103 
ngx_uöt_t
 
	m˘x_ödex
;

104 
ngx_uöt_t
 
	mödex
;

106 
ngx_uöt_t
 
	m•¨e0
;

107 
ngx_uöt_t
 
	m•¨e1
;

108 
ngx_uöt_t
 
	m•¨e2
;

109 
ngx_uöt_t
 
	m•¨e3
;

111 
ngx_uöt_t
 
	mvîsi⁄
;

113 *
	m˘x
;

114 
ngx_comm™d_t
 *
	mcomm™ds
;

115 
ngx_uöt_t
 
	mty≥
;

117 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

119 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

121 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

122 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

123 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

124 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

126 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

128 
uöçå_t
 
	m•¨e_hook0
;

129 
uöçå_t
 
	m•¨e_hook1
;

130 
uöçå_t
 
	m•¨e_hook2
;

131 
uöçå_t
 
	m•¨e_hook3
;

132 
uöçå_t
 
	m•¨e_hook4
;

133 
uöçå_t
 
	m•¨e_hook5
;

134 
uöçå_t
 
	m•¨e_hook6
;

135 
uöçå_t
 
	m•¨e_hook7
;

140 
ngx_°r_t
 
	m«me
;

141 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

142 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

143 } 
	tngx_c‹e_moduÀ_t
;

147 
ngx_fûe_t
 
	mfûe
;

148 
ngx_buf_t
 *
	mbuf„r
;

149 
ngx_uöt_t
 
	mlöe
;

150 } 
	tngx_c⁄f_fûe_t
;

153 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

154 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

157 
	sngx_c⁄f_s
 {

158 *
	m«me
;

159 
ngx_¨øy_t
 *
	m¨gs
;

161 
ngx_cy˛e_t
 *
	mcy˛e
;

162 
ngx_poﬁ_t
 *
	mpoﬁ
;

163 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

164 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

165 
ngx_log_t
 *
	mlog
;

167 *
	m˘x
;

168 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

169 
ngx_uöt_t
 
	mcmd_ty≥
;

171 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

172 *
	mh™dÀr_c⁄f
;

176 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

177 *
	td©a
, *
	tc⁄f
);

180 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

181 } 
	tngx_c⁄f_po°_t
;

185 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

186 *
	mﬁd_«me
;

187 *
	m√w_«me
;

188 } 
	tngx_c⁄f_dïªˇãd_t
;

192 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

193 
ngx_öt_t
 
	mlow
;

194 
ngx_öt_t
 
	mhigh
;

195 } 
	tngx_c⁄f_num_bounds_t
;

199 
ngx_°r_t
 
	m«me
;

200 
ngx_uöt_t
 
	mvÆue
;

201 } 
	tngx_c⁄f_íum_t
;

204 
	#NGX_CONF_BITMASK_SET
 1

	)

207 
ngx_°r_t
 
	m«me
;

208 
ngx_uöt_t
 
	mmask
;

209 } 
	tngx_c⁄f_bômask_t
;

213 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

214 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

217 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

221 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

222 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

223 
c⁄f
 = ; \

224 }

	)

226 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

227 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

228 
c⁄f
 = ; \

229 }

	)

231 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

232 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

233 
c⁄f
 = ; \

234 }

	)

236 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

237 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

238 
c⁄f
 = ; \

239 }

	)

241 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

242 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

243 
c⁄f
 = ; \

244 }

	)

246 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

247 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

248 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

249 }

	)

251 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

252 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

253 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

254 }

	)

256 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

257 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

258 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

259 }

	)

261 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

262 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

263 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

264 }

	)

266 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

267 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

268 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

269 }

	)

271 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

272 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

273 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

274 }

	)

276 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

277 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

278 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

279 }

	)

281 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

282 i‡(
c⁄f
.
d©a
 =
NULL
) { \

283 i‡(
¥ev
.
d©a
) { \

284 
c⁄f
.
Àn
 = 
¥ev
.len; \

285 
c⁄f
.
d©a
 = 
¥ev
.data; \

287 
c⁄f
.
Àn
 = () - 1; \

288 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

290 }

	)

292 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

293 i‡(
c⁄f
.
num
 == 0) { \

294 i‡(
¥ev
.
num
) { \

295 
c⁄f
.
num
 = 
¥ev
.num; \

296 
c⁄f
.
size
 = 
¥ev
.size; \

298 
c⁄f
.
num
 = 
deÁu…_num
; \

299 
c⁄f
.
size
 = 
deÁu…_size
; \

301 }

	)

303 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

304 i‡(
c⁄f
 == 0) { \

305 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

306 }

	)

309 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

310 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

311 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

314 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

315 
ngx_uöt_t
 
c⁄f_¥efix
);

316 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

317 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

318 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

321 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

322 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

323 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

324 *
c⁄f
);

325 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

326 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

327 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

328 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

329 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

330 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

331 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

332 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

333 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

336 
ngx_uöt_t
 
ngx_max_moduÀ
;

337 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

	@/home/wuhong/github/google/ngx_google/src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

47 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


48 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

52 #i‡!(
NGX_WIN32
)

54 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

55 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

57 
	#ngx_øndom
 
øndom


	)

60 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

61 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

62 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

63 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

65 #i‡(
NGX_LINUXTHREADS
)

66 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

67 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

69 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

70 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

73 
	#ngx_cde˛


	)

74 
	#ngx_libc_cde˛


	)

78 
öçå_t
 
	tngx_öt_t
;

79 
uöçå_t
 
	tngx_uöt_t
;

80 
öçå_t
 
	tngx_Êag_t
;

83 
	#NGX_INT32_LEN
 (("-2147483648"Ë- 1)

	)

84 
	#NGX_INT64_LEN
 (("-9223372036854775808"Ë- 1)

	)

86 #i‡(
NGX_PTR_SIZE
 == 4)

87 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

89 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

93 #i‚de‡
NGX_ALIGNMENT


94 
	#NGX_ALIGNMENT
 (Ë

	)

97 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

98 
	#ngx_Æign_±r
(
p
, 
a
) \

99 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

102 
	#ngx_ab‹t
 
ab‹t


	)

106 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

110 #i‚de‡
ngx_ölöe


111 
	#ngx_ölöe
 
ölöe


	)

114 #i‚de‡
INADDR_NONE


115 
	#INADDR_NONE
 ((Ë-1)

	)

118 #ifde‡
MAXHOSTNAMELEN


119 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

121 
	#NGX_MAXHOSTNAMELEN
 256

	)

125 #i‡((
__GNU__
 =2Ë&& (
__GNUC_MINOR__
 < 8))

126 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffffLL

	)

128 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

131 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

	@/home/wuhong/github/google/ngx_google/src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

31 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

32 
	mkìpidÀ
;

33 
	mkìpötvl
;

34 
	mkìp˙t
;

38 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

40 *
	m£rvîs
;

42 
ngx_log_t
 
	mlog
;

43 
ngx_log_t
 *
	mlogp
;

45 
size_t
 
	mpoﬁ_size
;

47 
size_t
 
	mpo°_ac˚±_buf„r_size
;

49 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

51 
ngx_li°íög_t
 *
	m¥evious
;

52 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

54 
	m›í
:1;

55 
	mªmaö
:1;

56 
	mign‹e
:1;

58 
	mbound
:1;

59 
	möhîôed
:1;

60 
	mn⁄blockög_ac˚±
:1;

61 
	mli°í
:1;

62 
	mn⁄blockög
:1;

63 
	msh¨ed
:1;

64 
	maddr_¡›
:1;

66 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

67 
	mùv6⁄ly
:1;

69 
	mkì∑live
:2;

71 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

72 
	mde„ºed_ac˚±
:1;

73 
	mdñëe_de„ºed
:1;

74 
	madd_de„ºed
:1;

75 #ifde‡
SO_ACCEPTFILTER


76 *
	mac˚±_fûãr
;

79 #i‡(
NGX_HAVE_SETFIB
)

80 
	m£tfib
;

83 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

84 
	mÁ°›í
;

91 
	mNGX_ERROR_ALERT
 = 0,

92 
	mNGX_ERROR_ERR
,

93 
	mNGX_ERROR_INFO
,

94 
	mNGX_ERROR_IGNORE_ECONNRESET
,

95 
	mNGX_ERROR_IGNORE_EINVAL


96 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

100 
	mNGX_TCP_NODELAY_UNSET
 = 0,

101 
	mNGX_TCP_NODELAY_SET
,

102 
	mNGX_TCP_NODELAY_DISABLED


103 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

107 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

108 
	mNGX_TCP_NOPUSH_SET
,

109 
	mNGX_TCP_NOPUSH_DISABLED


110 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

113 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

114 
	#NGX_SSL_BUFFERED
 0x01

	)

115 
	#NGX_SPDY_BUFFERED
 0x02

	)

118 
	sngx_c⁄√˘i⁄_s
 {

119 *
	md©a
;

120 
ngx_evít_t
 *
	mªad
;

121 
ngx_evít_t
 *
	mwrôe
;

123 
ngx_sockë_t
 
	mfd
;

125 
ngx_ªcv_±
 
	mªcv
;

126 
ngx_£nd_±
 
	m£nd
;

127 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

128 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

130 
ngx_li°íög_t
 *
	mli°íög
;

132 
off_t
 
	m£¡
;

134 
ngx_log_t
 *
	mlog
;

136 
ngx_poﬁ_t
 *
	mpoﬁ
;

138 
sockaddr
 *
	msockaddr
;

139 
sockÀn_t
 
	msockÀn
;

140 
ngx_°r_t
 
	maddr_ãxt
;

142 
ngx_°r_t
 
	m¥oxy_¥Ÿocﬁ_addr
;

144 #i‡(
NGX_SSL
)

145 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

148 
sockaddr
 *
	mloˇl_sockaddr
;

149 
sockÀn_t
 
	mloˇl_sockÀn
;

151 
ngx_buf_t
 *
	mbuf„r
;

153 
ngx_queue_t
 
	mqueue
;

155 
ngx_©omic_uöt_t
 
	mnumbî
;

157 
ngx_uöt_t
 
	mªque°s
;

159 
	mbuf„ªd
:8;

161 
	mlog_îr‹
:3;

163 
	mu√x≥˘ed_eof
:1;

164 
	mtimedout
:1;

165 
	mîr‹
:1;

166 
	mde°royed
:1;

168 
	midÀ
:1;

169 
	mªußbÀ
:1;

170 
	m˛o£
:1;

172 
	m£ndfûe
:1;

173 
	m¢dlow©
:1;

174 
	mt˝_nodñay
:2;

175 
	mt˝_n›ush
:2;

177 
	m√ed_œ°_buf
:1;

179 #i‡(
NGX_HAVE_IOCP
)

180 
	mac˚±_c⁄ãxt_upd©ed
:1;

183 #i‡(
NGX_HAVE_AIO_SENDFILE
)

184 
	maio_£ndfûe
:1;

185 
	mbusy_cou¡
:2;

186 
ngx_buf_t
 *
	mbusy_£ndfûe
;

189 #i‡(
NGX_THREADS
)

190 
ngx_©omic_t
 
	mlock
;

195 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
,

196 
sockÀn_t
 
sockÀn
);

197 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

198 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

199 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

200 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

201 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

202 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

203 
ngx_uöt_t
 
p‹t
);

204 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

206 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

207 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

209 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

13 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

14 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

15 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

16 
ngx_chaö_s
 
	tngx_chaö_t
;

17 
ngx_log_s
 
	tngx_log_t
;

18 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

19 
ngx_comm™d_s
 
	tngx_comm™d_t
;

20 
ngx_fûe_s
 
	tngx_fûe_t
;

21 
ngx_evít_s
 
	tngx_evít_t
;

22 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

23 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

25 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

26 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

29 
	#NGX_OK
 0

	)

30 
	#NGX_ERROR
 -1

	)

31 
	#NGX_AGAIN
 -2

	)

32 
	#NGX_BUSY
 -3

	)

33 
	#NGX_DONE
 -4

	)

34 
	#NGX_DECLINED
 -5

	)

35 
	#NGX_ABORT
 -6

	)

38 
	~<ngx_î∫o.h
>

39 
	~<ngx_©omic.h
>

40 
	~<ngx_thªad.h
>

41 
	~<ngx_rbåì.h
>

42 
	~<ngx_time.h
>

43 
	~<ngx_sockë.h
>

44 
	~<ngx_°rög.h
>

45 
	~<ngx_fûes.h
>

46 
	~<ngx_shmem.h
>

47 
	~<ngx_¥o˚ss.h
>

48 
	~<ngx_u£r.h
>

49 
	~<ngx_∑r£.h
>

50 
	~<ngx_log.h
>

51 
	~<ngx_Æloc.h
>

52 
	~<ngx_∑Œoc.h
>

53 
	~<ngx_buf.h
>

54 
	~<ngx_queue.h
>

55 
	~<ngx_¨øy.h
>

56 
	~<ngx_li°.h
>

57 
	~<ngx_hash.h
>

58 
	~<ngx_fûe.h
>

59 
	~<ngx_¸c.h
>

60 
	~<ngx_¸c32.h
>

61 
	~<ngx_murmurhash.h
>

62 #i‡(
NGX_PCRE
)

63 
	~<ngx_ªgex.h
>

65 
	~<ngx_ødix_åì.h
>

66 
	~<ngx_times.h
>

67 
	~<ngx_shmtx.h
>

68 
	~<ngx_¶ab.h
>

69 
	~<ngx_öë.h
>

70 
	~<ngx_cy˛e.h
>

71 
	~<ngx_ªsﬁvî.h
>

72 #i‡(
NGX_OPENSSL
)

73 
	~<ngx_evít_›ís¶.h
>

75 
	~<ngx_¥o˚ss_cy˛e.h
>

76 
	~<ngx_c⁄f_fûe.h
>

77 
	~<ngx_›í_fûe_ˇche.h
>

78 
	~<ngx_os.h
>

79 
	~<ngx_c⁄√˘i⁄.h
>

80 
	~<ngx_sy¶og.h
>

81 
	~<ngx_¥oxy_¥Ÿocﬁ.h
>

84 
	#LF
 (
u_ch¨
Ë'\n'

	)

85 
	#CR
 (
u_ch¨
Ë'\r'

	)

86 
	#CRLF
 "\r\n"

	)

89 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

90 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

91 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

93 
	`ngx_˝uöfo
();

95 #i‡(
NGX_HAVE_OPENAT
)

96 
	#NGX_DISABLE_SYMLINKS_OFF
 0

	)

97 
	#NGX_DISABLE_SYMLINKS_ON
 1

	)

98 
	#NGX_DISABLE_SYMLINKS_NOTOWNER
 2

	)

	@/home/wuhong/github/google/ngx_google/src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@/home/wuhong/github/google/ngx_google/src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@/home/wuhong/github/google/ngx_google/src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 
NGX_DEFAULT_POOL_SIZE


	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

37 
	sngx_cy˛e_s
 {

38 ****
c⁄f_˘x
;

39 
ngx_poﬁ_t
 *
poﬁ
;

41 
ngx_log_t
 *
log
;

42 
ngx_log_t
 
√w_log
;

44 
ngx_uöt_t
 
log_u£_°dîr
;

46 
ngx_c⁄√˘i⁄_t
 **
fûes
;

47 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

48 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

50 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

52 
ngx_¨øy_t
 
li°íög
;

53 
ngx_¨øy_t
 
∑ths
;

54 
ngx_li°_t
 
›í_fûes
;

55 
ngx_li°_t
 
sh¨ed_mem‹y
;

57 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

58 
ngx_uöt_t
 
fûes_n
;

60 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

61 
ngx_evít_t
 *
ªad_evíts
;

62 
ngx_evít_t
 *
wrôe_evíts
;

64 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

66 
ngx_°r_t
 
c⁄f_fûe
;

67 
ngx_°r_t
 
c⁄f_∑øm
;

68 
ngx_°r_t
 
c⁄f_¥efix
;

69 
ngx_°r_t
 
¥efix
;

70 
ngx_°r_t
 
lock_fûe
;

71 
ngx_°r_t
 
ho°«me
;

76 
ngx_Êag_t
 
d´m⁄
;

77 
ngx_Êag_t
 
ma°î
;

79 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

81 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

82 
ngx_öt_t
 
debug_poöts
;

84 
ngx_öt_t
 
æimô_nofûe
;

85 
ngx_öt_t
 
æimô_sig≥ndög
;

86 
off_t
 
æimô_c‹e
;

88 
¥i‹ôy
;

90 
ngx_uöt_t
 
˝u_afföôy_n
;

91 
uöt64_t
 *
˝u_afföôy
;

93 *
u£∫ame
;

94 
ngx_uid_t
 
u£r
;

95 
ngx_gid_t
 
group
;

97 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

98 
ngx_°r_t
 
lock_fûe
;

100 
ngx_°r_t
 
pid
;

101 
ngx_°r_t
 
ﬁdpid
;

103 
ngx_¨øy_t
 
ív
;

104 **
ívú⁄mít
;

106 #i‡(
NGX_THREADS
)

107 
ngx_öt_t
 
w‹kî_thªads
;

108 
size_t
 
thªad_°ack_size
;

111 } 
	tngx_c‹e_c⁄f_t
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 } 
	tngx_c‹e_és_t
;

119 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

122 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

123 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

124 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

125 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

126 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

127 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

128 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

129 
uöt64_t
 
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

130 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

131 
size_t
 
size
, *
èg
);

134 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

135 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

136 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

137 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

138 
ngx_uöt_t
 
ngx_quõt_mode
;

139 #i‡(
NGX_THREADS
)

140 
ngx_és_key_t
 
ngx_c‹e_és_key
;

	@/home/wuhong/github/google/ngx_google/src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_HAVE_FILE_AIO
)

27 
ngx_evít_aio_t
 *
	maio
;

30 
	mvÆid_öfo
:1;

31 
	mdúe˘io
:1;

35 
	#NGX_MAX_PATH_LEVEL
 3

	)

38 
	$time_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

39 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

43 
ngx_°r_t
 
«me
;

44 
size_t
 
Àn
;

45 
size_t
 
Àvñ
[3];

47 
ngx_∑th_m™agî_±
 
m™agî
;

48 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

49 *
d©a
;

51 
u_ch¨
 *
c⁄f_fûe
;

52 
ngx_uöt_t
 
löe
;

53 } 
	tngx_∑th_t
;

57 
ngx_°r_t
 
«me
;

58 
size_t
 
Àvñ
[3];

59 } 
	tngx_∑th_öô_t
;

63 
ngx_fûe_t
 
fûe
;

64 
off_t
 
off£t
;

65 
ngx_∑th_t
 *
∑th
;

66 
ngx_poﬁ_t
 *
poﬁ
;

67 *
w¨n
;

69 
ngx_uöt_t
 
ac˚ss
;

71 
log_Àvñ
:8;

72 
≥rsi°ít
:1;

73 
˛ón
:1;

74 } 
	tngx_ãmp_fûe_t
;

78 
ngx_uöt_t
 
ac˚ss
;

79 
ngx_uöt_t
 
∑th_ac˚ss
;

80 
time_t
 
time
;

81 
ngx_fd_t
 
fd
;

83 
¸óã_∑th
:1;

84 
dñëe_fûe
:1;

86 
ngx_log_t
 *
log
;

87 } 
	tngx_ext_ª«me_fûe_t
;

91 
off_t
 
size
;

92 
size_t
 
buf_size
;

94 
ngx_uöt_t
 
ac˚ss
;

95 
time_t
 
time
;

97 
ngx_log_t
 *
log
;

98 } 
	tngx_c›y_fûe_t
;

101 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

103 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

104 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

106 
	sngx_åì_˘x_s
 {

107 
off_t
 
size
;

108 
off_t
 
fs_size
;

109 
ngx_uöt_t
 
ac˚ss
;

110 
time_t
 
mtime
;

112 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

113 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

114 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

115 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

116 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

118 *
d©a
;

119 
size_t
 
Æloc
;

121 
ngx_log_t
 *
log
;

125 
ngx_öt_t
 
	`ngx_gë_fuŒ_«me
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
¥efix
,

126 
ngx_°r_t
 *
«me
);

128 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

129 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

130 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

131 
ngx_uöt_t
 
ac˚ss
);

132 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

133 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

134 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

135 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

136 
ngx_öt_t
 
	`ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

137 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

138 
ngx_ext_ª«me_fûe_t
 *
ext
);

139 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

140 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

142 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

144 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

145 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

146 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

147 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

150 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

151 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@/home/wuhong/github/google/ngx_google/src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

24 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

25 
	#NGX_INET6_ADDRSTRLEN
 \

26 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

27 
	#NGX_UNIX_ADDRSTRLEN
 \

28 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

30 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

31 
	#NGX_SOCKADDR_STRLEN
 (("unix:"Ë- 1 + 
NGX_UNIX_ADDRSTRLEN
)

	)

33 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + ("[]:65535"Ë- 1)

	)

36 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

37 
	#NGX_SOCKADDRLEN
 (
sockaddr_un
)

	)

39 
	#NGX_SOCKADDRLEN
 512

	)

44 
ö_addr_t
 
	maddr
;

45 
ö_addr_t
 
	mmask
;

46 } 
	tngx_ö_cidr_t
;

49 #i‡(
NGX_HAVE_INET6
)

52 
ö6_addr
 
	maddr
;

53 
ö6_addr
 
	mmask
;

54 } 
	tngx_ö6_cidr_t
;

60 
ngx_uöt_t
 
	mÁmûy
;

62 
ngx_ö_cidr_t
 
	mö
;

63 #i‡(
NGX_HAVE_INET6
)

64 
ngx_ö6_cidr_t
 
	mö6
;

66 } 
	mu
;

67 } 
	tngx_cidr_t
;

71 
sockaddr
 *
	msockaddr
;

72 
sockÀn_t
 
	msockÀn
;

73 
ngx_°r_t
 
	m«me
;

74 } 
	tngx_addr_t
;

78 
ngx_°r_t
 
	muæ
;

79 
ngx_°r_t
 
	mho°
;

80 
ngx_°r_t
 
	mp‹t_ãxt
;

81 
ngx_°r_t
 
	muri
;

83 
ö_p‹t_t
 
	mp‹t
;

84 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

85 
	mÁmûy
;

87 
	mli°í
:1;

88 
	muri_∑π
:1;

89 
	mno_ªsﬁve
:1;

90 
	m⁄e_addr
:1;

92 
	mno_p‹t
:1;

93 
	mwûdˇrd
:1;

95 
sockÀn_t
 
	msockÀn
;

96 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

98 
ngx_addr_t
 *
	maddrs
;

99 
ngx_uöt_t
 
	m«ddrs
;

101 *
	mîr
;

102 } 
	tngx_uæ_t
;

105 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

106 #i‡(
NGX_HAVE_INET6
)

107 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

108 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

110 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
sockÀn_t
 
sockÀn
, 
u_ch¨
 *
ãxt
,

111 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
);

112 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

113 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

114 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

115 
size_t
 
Àn
);

116 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

117 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

118 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, 
sockÀn_t
 
¶í1
,

119 
sockaddr
 *
ß2
, 
sockÀn_t
 
¶í2
, 
ngx_uöt_t
 
cmp_p‹t
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_MYSQL
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_MYSQL


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

46 (*
	tngx_log_wrôî_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tngx_uöt_t
 
	tÀvñ
,

47 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

50 
	sngx_log_s
 {

51 
ngx_uöt_t
 
log_Àvñ
;

52 
ngx_›í_fûe_t
 *
fûe
;

54 
ngx_©omic_uöt_t
 
c⁄√˘i⁄
;

56 
ngx_log_h™dÀr_±
 
h™dÀr
;

57 *
d©a
;

59 
ngx_log_wrôî_±
 
wrôî
;

60 *
wd©a
;

68 *
a˘i⁄
;

70 
ngx_log_t
 *
√xt
;

74 
	#NGX_MAX_ERROR_STR
 2048

	)

79 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

81 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

83 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

84 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

86 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

87 c⁄° *
fmt
, ...);

89 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

90 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

91 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

95 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

97 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

99 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

100 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

102 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

103 c⁄° *
fmt
, ...);

105 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

106 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

107 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

113 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

115 
ngx_cde˛
 
	`ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

116 c⁄° *
fmt
, ...);

117 
	`ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

118 c⁄° *
fmt
, 
va_li°
 
¨gs
);

119 
ngx_cde˛
 
	`ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

120 c⁄° *
fmt
, ...);

128 #i‡(
NGX_DEBUG
)

130 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

132 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

133 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

135 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

136 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

138 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

139 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

141 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

142 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

144 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

145 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

147 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

148 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

150 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

151 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

152 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

153 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

155 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

156 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

157 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

158 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

160 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

161 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

162 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

163 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

168 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

169 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

170 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

172 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

173 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

174 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

176 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

177 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

178 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

180 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

181 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

182 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

184 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

185 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

186 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

188 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

189 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

190 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

192 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

193 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

194 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

195 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

197 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

198 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

199 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

200 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

201 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

203 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

204 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

205 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

206 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

207 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

213 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

214 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

215 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

216 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

217 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

218 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

219 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

220 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

221 
¨g6
, 
¨g7
)

	)

222 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

223 
¨g6
, 
¨g7
, 
¨g8
)

	)

229 
ngx_log_t
 *
	`ngx_log_öô
(
u_ch¨
 *
¥efix
);

230 
ngx_cde˛
 
	`ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

231 
ngx_cde˛
 
	`ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

232 
u_ch¨
 *
	`ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

233 
ngx_öt_t
 
	`ngx_log_›í_deÁu…
(
ngx_cy˛e_t
 *
cy˛e
);

234 
ngx_öt_t
 
	`ngx_log_ªdúe˘_°dîr
(
ngx_cy˛e_t
 *
cy˛e
);

235 
ngx_log_t
 *
	`ngx_log_gë_fûe_log
“gx_log_à*
hód
);

236 *
	`ngx_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 **
hód
);

248 
ngx_ölöe
 

249 
	$ngx_wrôe_°dîr
(*
ãxt
)

251 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`ngx_°æí
(text));

252 
	}
}

255 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

256 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@/home/wuhong/github/google/ngx_google/src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_MD5
)

18 #i‡(
NGX_HAVE_OPENSSL_MD5_H
)

19 
	~<›ís¶/md5.h
>

21 
	~<md5.h
>

25 
MD5_CTX
 
	tngx_md5_t
;

28 #i‡(
NGX_OPENSSL_MD5
)

30 
	#ngx_md5_öô
 
MD5_Inô


	)

31 
	#ngx_md5_upd©e
 
MD5_Upd©e


	)

32 
	#ngx_md5_föÆ
 
MD5_FöÆ


	)

36 
	#ngx_md5_öô
 
MD5Inô


	)

37 
	#ngx_md5_upd©e
 
MD5Upd©e


	)

38 
	#ngx_md5_föÆ
 
MD5FöÆ


	)

47 
uöt64_t
 
	mbyãs
;

48 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

49 
u_ch¨
 
	mbuf„r
[64];

50 } 
	tngx_md5_t
;

53 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

54 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

55 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 #i‡(
NGX_HAVE_OPENAT
)

36 
size_t
 
	mdißbÀ_symlöks_‰om
;

37 
	mdißbÀ_symlöks
:2;

40 
	mã°_dú
:1;

41 
	mã°_⁄ly
:1;

42 
	mlog
:1;

43 
	mîr‹s
:1;

44 
	mevíts
:1;

46 
	mis_dú
:1;

47 
	mis_fûe
:1;

48 
	mis_lök
:1;

49 
	mis_exec
:1;

50 
	mis_dúe˘io
:1;

51 } 
	tngx_›í_fûe_öfo_t
;

54 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

56 
	sngx_ˇched_›í_fûe_s
 {

57 
ngx_rbåì_node_t
 
	mnode
;

58 
ngx_queue_t
 
	mqueue
;

60 
u_ch¨
 *
	m«me
;

61 
time_t
 
	m¸óãd
;

62 
time_t
 
	mac˚s£d
;

64 
ngx_fd_t
 
	mfd
;

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mmtime
;

67 
off_t
 
	msize
;

68 
ngx_îr_t
 
	mîr
;

70 
uöt32_t
 
	mu£s
;

72 #i‡(
NGX_HAVE_OPENAT
)

73 
size_t
 
	mdißbÀ_symlöks_‰om
;

74 
	mdißbÀ_symlöks
:2;

77 
	mcou¡
:24;

78 
	m˛o£
:1;

79 
	mu£_evít
:1;

81 
	mis_dú
:1;

82 
	mis_fûe
:1;

83 
	mis_lök
:1;

84 
	mis_exec
:1;

85 
	mis_dúe˘io
:1;

87 
ngx_evít_t
 *
	mevít
;

92 
ngx_rbåì_t
 
	mrbåì
;

93 
ngx_rbåì_node_t
 
	m£¡öñ
;

94 
ngx_queue_t
 
	mexpúe_queue
;

96 
ngx_uöt_t
 
	mcuºít
;

97 
ngx_uöt_t
 
	mmax
;

98 
time_t
 
	möa˘ive
;

99 } 
	tngx_›í_fûe_ˇche_t
;

103 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

104 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

105 
ngx_uöt_t
 
	mmö_u£s
;

106 
ngx_log_t
 *
	mlog
;

107 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

113 *
	md©a
;

114 
ngx_evít_t
 *
	mªad
;

115 
ngx_evít_t
 *
	mwrôe
;

116 
ngx_fd_t
 
	mfd
;

118 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

119 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

120 } 
	tngx_›í_fûe_ˇche_evít_t
;

123 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

124 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

125 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

126 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 *
	`ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 *
	`ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

78 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

79 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

80 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

82 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

83 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

84 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

85 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

86 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

89 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

90 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

91 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

92 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

17 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

18 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_proxy_protocol.h

8 #i‚de‡
_NGX_PROXY_PROTOCOL_H_INCLUDED_


9 
	#_NGX_PROXY_PROTOCOL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_PROXY_PROTOCOL_MAX_HEADER
 107

	)

19 
u_ch¨
 *
ngx_¥oxy_¥Ÿocﬁ_∑r£
(
ngx_c⁄√˘i⁄_t
 *
c
, u_ch¨ *
buf
,

20 
u_ch¨
 *
œ°
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
next

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@/home/wuhong/github/google/ngx_google/src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

40 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

41 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

42 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

43 
uöt32_t
 
key
, uöt32_à
mask
);

44 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_öt_t
 
ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

48 
u_ch¨
 *
key
, u_ch¨ *
mask
, 
uöçå_t
 
vÆue
);

49 
ngx_öt_t
 
ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

50 
u_ch¨
 *
key
, u_ch¨ *
mask
);

51 
uöçå_t
 
ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
);

52 
	`ngx_rbåì_dñëe
(
ngx_rbåì_t
 *
åì
, 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

54 
ngx_rbåì_node_t
 *
£¡öñ
);

55 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

56 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

59 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

60 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

61 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

62 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

63 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

68 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

71 
ngx_ölöe
 
ngx_rbåì_node_t
 *

72 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

74 
node
->
À·
 !
£¡öñ
) {

75 
node
 =Çode->
À·
;

78  
node
;

79 
	}
}

	@/home/wuhong/github/google/ngx_google/src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

24 
p¸e
 *
	mcode
;

25 
p¸e_exåa
 *
	mexåa
;

26 } 
	tngx_ªgex_t
;

30 
ngx_°r_t
 
	m∑âîn
;

31 
ngx_poﬁ_t
 *
	mpoﬁ
;

32 
ngx_öt_t
 
	m›ti⁄s
;

34 
ngx_ªgex_t
 *
	mªgex
;

35 
	mˇ±uªs
;

36 
	m«med_ˇ±uªs
;

37 
	m«me_size
;

38 
u_ch¨
 *
	m«mes
;

39 
ngx_°r_t
 
	mîr
;

40 } 
	tngx_ªgex_compûe_t
;

44 
ngx_ªgex_t
 *
	mªgex
;

45 
u_ch¨
 *
	m«me
;

46 } 
	tngx_ªgex_ñt_t
;

49 
ngx_ªgex_öô
();

50 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

52 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

53 
	`p¸e_exec
(
ª
->
code
,Ñe->
exåa
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

54 
ˇ±uªs
, 
size
)

	)

55 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

57 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 #i‡(
NGX_HAVE_INET6
)

22 
	#NGX_RESOLVE_AAAA
 28

	)

24 
	#NGX_RESOLVE_DNAME
 39

	)

26 
	#NGX_RESOLVE_FORMERR
 1

	)

27 
	#NGX_RESOLVE_SERVFAIL
 2

	)

28 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

29 
	#NGX_RESOLVE_NOTIMP
 4

	)

30 
	#NGX_RESOLVE_REFUSED
 5

	)

31 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

34 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

36 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

40 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

41 
sockaddr
 *
	msockaddr
;

42 
sockÀn_t
 
	msockÀn
;

43 
ngx_°r_t
 
	m£rvî
;

44 
ngx_log_t
 
	mlog
;

45 } 
	tngx_udp_c⁄√˘i⁄_t
;

48 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

50 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

55 
u_ch¨
 *
«me
;

57 
ngx_queue_t
 
queue
;

60 
ngx_öt_t
 
idít
;

62 
ngx_rbåì_node_t
 
node
;

64 #i‡(
NGX_HAVE_INET6
)

66 
ö6_addr
 
addr6
;

69 
u_sh‹t
 
∆í
;

70 
u_sh‹t
 
qÀn
;

72 
u_ch¨
 *
quîy
;

73 #i‡(
NGX_HAVE_INET6
)

74 
u_ch¨
 *
quîy6
;

78 
ö_addr_t
 
addr
;

79 
ö_addr_t
 *
addrs
;

80 
u_ch¨
 *
˙ame
;

81 } 
u
;

83 
u_ch¨
 
code
;

84 
u_sh‹t
 
«ddrs
;

85 
u_sh‹t
 
˙Àn
;

87 #i‡(
NGX_HAVE_INET6
)

89 
ö6_addr
 
addr6
;

90 
ö6_addr
 *
addrs6
;

91 } 
u6
;

93 
u_sh‹t
 
«ddrs6
;

96 
time_t
 
expúe
;

97 
time_t
 
vÆid
;

98 
uöt32_t
 
âl
;

100 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

101 } 
	tngx_ªsﬁvî_node_t
;

106 
ngx_evít_t
 *
evít
;

107 *
dummy
;

108 
ngx_log_t
 *
log
;

111 
ngx_öt_t
 
idít
;

114 
ngx_¨øy_t
 
udp_c⁄√˘i⁄s
;

115 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

117 
ngx_rbåì_t
 
«me_rbåì
;

118 
ngx_rbåì_node_t
 
«me_£¡öñ
;

120 
ngx_rbåì_t
 
addr_rbåì
;

121 
ngx_rbåì_node_t
 
addr_£¡öñ
;

123 
ngx_queue_t
 
«me_ª£nd_queue
;

124 
ngx_queue_t
 
addr_ª£nd_queue
;

126 
ngx_queue_t
 
«me_expúe_queue
;

127 
ngx_queue_t
 
addr_expúe_queue
;

129 #i‡(
NGX_HAVE_INET6
)

130 
ngx_uöt_t
 
ùv6
;

131 
ngx_rbåì_t
 
addr6_rbåì
;

132 
ngx_rbåì_node_t
 
addr6_£¡öñ
;

133 
ngx_queue_t
 
addr6_ª£nd_queue
;

134 
ngx_queue_t
 
addr6_expúe_queue
;

137 
time_t
 
ª£nd_timeout
;

138 
time_t
 
expúe
;

139 
time_t
 
vÆid
;

141 
ngx_uöt_t
 
log_Àvñ
;

142 } 
	tngx_ªsﬁvî_t
;

145 
	sngx_ªsﬁvî_˘x_s
 {

146 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

147 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

148 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

150 
ngx_öt_t
 
°©e
;

151 
ngx_°r_t
 
«me
;

153 
ngx_uöt_t
 
«ddrs
;

154 
ngx_addr_t
 *
addrs
;

155 
ngx_addr_t
 
addr
;

156 
sockaddr_ö
 
sö
;

158 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

159 *
d©a
;

160 
ngx_m£c_t
 
timeout
;

162 
ngx_uöt_t
 
quick
;

163 
ngx_uöt_t
 
ªcursi⁄
;

164 
ngx_evít_t
 *
evít
;

168 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
,

169 
ngx_uöt_t
 
n
);

170 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

171 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

172 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

173 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

174 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

175 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

176 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_OPENSSL_SHA1_H
)

17 
	~<›ís¶/sha.h
>

19 
	~<sha.h
>

23 
SHA_CTX
 
	tngx_sha1_t
;

26 
	#ngx_sha1_öô
 
SHA1_Inô


	)

27 
	#ngx_sha1_upd©e
 
SHA1_Upd©e


	)

28 
	#ngx_sha1_föÆ
 
SHA1_FöÆ


	)

	@/home/wuhong/github/google/ngx_google/src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
ngx_©omic_t
 
	mlock
;

18 #i‡(
NGX_HAVE_POSIX_SEM
)

19 
ngx_©omic_t
 
	mwaô
;

21 } 
	tngx_shmtx_sh_t
;

25 #i‡(
NGX_HAVE_ATOMIC_OPS
)

26 
ngx_©omic_t
 *
	mlock
;

27 #i‡(
NGX_HAVE_POSIX_SEM
)

28 
ngx_©omic_t
 *
	mwaô
;

29 
ngx_uöt_t
 
	m£m≠h‹e
;

30 
£m_t
 
	m£m
;

33 
ngx_fd_t
 
	mfd
;

34 
u_ch¨
 *
	m«me
;

36 
ngx_uöt_t
 
	m•ö
;

37 } 
	tngx_shmtx_t
;

40 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
,

41 
u_ch¨
 *
«me
);

42 
ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
);

43 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

44 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

45 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

46 
ngx_uöt_t
 
ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_shmtx_sh_t
 
	mlock
;

28 
size_t
 
	mmö_size
;

29 
size_t
 
	mmö_shi·
;

31 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

32 
ngx_¶ab_∑ge_t
 *
	mœ°
;

33 
ngx_¶ab_∑ge_t
 
	m‰ì
;

35 
u_ch¨
 *
	m°¨t
;

36 
u_ch¨
 *
	míd
;

38 
ngx_shmtx_t
 
	mmuãx
;

40 
u_ch¨
 *
	mlog_˘x
;

41 
u_ch¨
 
	mzîo
;

43 
	mlog_nomem
:1;

45 *
	md©a
;

46 *
	maddr
;

47 } 
	tngx_¶ab_poﬁ_t
;

50 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

51 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

52 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

53 *
ngx_¶ab_ˇŒoc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

54 *
ngx_¶ab_ˇŒoc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

55 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

56 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
text

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

65 
ngx_ölöe
 
u_ch¨
 *

66 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

68 
p
 < 
œ°
) {

70 i‡(*
p
 =
c
) {

71  
p
;

74 
p
++;

77  
NULL
;

78 
	}
}

86 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

87 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

90 #i‡(
NGX_MEMCPY_LIMIT
)

92 *
ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

93 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

102 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

103 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

108 #i‡–
__INTEL_COMPILER
 >= 800 )

115 
ngx_ölöe
 
u_ch¨
 *

116 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

118 i‡(
Àn
 < 17) {

120 
Àn
) {

121 *
d°
++ = *
§c
++;

122 
Àn
--;

125  
d°
;

128  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

130 
	}
}

134 
	#ngx_c›y
 
ngx_˝ymem


	)

139 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

140 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

144 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

147 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

148 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

149 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

150 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

153 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

154 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

155 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

157 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

158 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

160 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

163 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

166 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

167 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

169 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

170 
ngx_öt_t
 
ngx_fûíame_cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

172 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

173 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

174 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

176 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

177 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

179 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

182 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

183 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

185 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

186 
ngx_ícode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

187 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

190 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

191 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

192 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

195 
	#NGX_ESCAPE_URI
 0

	)

196 
	#NGX_ESCAPE_ARGS
 1

	)

197 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

198 
	#NGX_ESCAPE_HTML
 3

	)

199 
	#NGX_ESCAPE_REFRESH
 4

	)

200 
	#NGX_ESCAPE_MEMCACHED
 5

	)

201 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

203 
	#NGX_UNESCAPE_URI
 1

	)

204 
	#NGX_UNESCAPE_REDIRECT
 2

	)

206 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

207 
ngx_uöt_t
 
ty≥
);

208 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

209 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

213 
ngx_rbåì_node_t
 
	mnode
;

214 
ngx_°r_t
 
	m°r
;

215 } 
	tngx_°r_node_t
;

218 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

219 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

220 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

221 
uöt32_t
 
hash
);

224 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

225 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

226 
	#ngx_qs‹t
 
qs‹t


	)

229 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

230 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@/home/wuhong/github/google/ngx_google/src/core/ngx_syslog.h

7 #i‚de‡
_NGX_SYSLOG_H_INCLUDED_


8 
	#_NGX_SYSLOG_H_INCLUDED_


	)

12 
ngx_poﬁ_t
 *
	mpoﬁ
;

13 
ngx_uöt_t
 
	mÁcûôy
;

14 
ngx_uöt_t
 
	m£vîôy
;

15 
ngx_°r_t
 
	mèg
;

17 
ngx_addr_t
 
	m£rvî
;

18 
ngx_c⁄√˘i⁄_t
 
	mc⁄n
;

19 
ngx_uöt_t
 
	mbusy
;

20 } 
	tngx_sy¶og_≥î_t
;

23 *
ngx_sy¶og_¥o˚ss_c⁄f
(
ngx_c⁄f_t
 *
cf
, 
ngx_sy¶og_≥î_t
 *
≥î
);

24 
u_ch¨
 *
ngx_sy¶og_add_hódî
(
ngx_sy¶og_≥î_t
 *
≥î
, u_ch¨ *
buf
);

25 
ngx_sy¶og_wrôî
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Àvñ
, 
u_ch¨
 *
buf
,

26 
size_t
 
Àn
);

27 
ssize_t
 
ngx_sy¶og_£nd
(
ngx_sy¶og_≥î_t
 *
≥î
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

	@/home/wuhong/github/google/ngx_google/src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

43 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_sy¶og_time
;

49 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

31 
ngx_uöt_t
 
	mlock
;

33 
ngx_evít_t
 *
	mevíts
;

34 
ngx_evít_t
 *
	mœ°
;

35 } 
	tngx_evít_muãx_t
;

38 
	sngx_evít_s
 {

39 *
	md©a
;

41 
	mwrôe
:1;

43 
	mac˚±
:1;

46 
	mö°™˚
:1;

52 
	ma˘ive
:1;

54 
	mdißbÀd
:1;

57 
	mªady
:1;

59 
	m⁄eshŸ
:1;

62 
	mcom∂ëe
:1;

64 
	meof
:1;

65 
	mîr‹
:1;

67 
	mtimedout
:1;

68 
	mtimî_£t
:1;

70 
	mdñayed
:1;

72 
	mde„ºed_ac˚±
:1;

75 
	m≥ndög_eof
:1;

77 
	mpo°ed
:1;

79 #i‡(
NGX_WIN32
)

81 
	mac˚±_c⁄ãxt_upd©ed
:1;

84 #i‡(
NGX_HAVE_KQUEUE
)

85 
	mkq_vnode
:1;

88 
	mkq_î∫o
;

105 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

106 
	mavaûabÀ
;

108 
	mavaûabÀ
:1;

111 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

114 #i‡(
NGX_HAVE_AIO
)

116 #i‡(
NGX_HAVE_IOCP
)

117 
ngx_evít_ovÕ_t
 
	movÕ
;

119 
aiocb
 
	maiocb
;

124 
ngx_uöt_t
 
	mödex
;

126 
ngx_log_t
 *
	mlog
;

128 
ngx_rbåì_node_t
 
	mtimî
;

131 
ngx_queue_t
 
	mqueue
;

133 
	m˛o£d
:1;

136 
	mch™√l
:1;

137 
	mªsﬁvî
:1;

139 
	mˇn˚œbÀ
:1;

152 *
	mthr_˘x
;

154 #i‡(
NGX_EVENT_T_PADDING
)

158 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

164 #i‡(
NGX_HAVE_FILE_AIO
)

166 
	sngx_evít_aio_s
 {

167 *
	md©a
;

168 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

169 
ngx_fûe_t
 *
	mfûe
;

171 
ngx_fd_t
 
	mfd
;

173 #i‡(
NGX_HAVE_EVENTFD
)

174 
öt64_t
 
	mªs
;

175 #i‡(
NGX_TEST_BUILD_EPOLL
)

176 
ngx_îr_t
 
	mîr
;

177 
size_t
 
	mnbyãs
;

180 
ngx_îr_t
 
	mîr
;

181 
size_t
 
	mnbyãs
;

184 #i‡(
NGX_HAVE_AIO_SENDFILE
)

185 
off_t
 
	mœ°_off£t
;

188 
ngx_aiocb_t
 
	maiocb
;

189 
ngx_evít_t
 
	mevít
;

196 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

197 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

199 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

200 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

202 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

203 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

205 
ngx_öt_t
 (*
¥o˚ss_ch™ges
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_uöt_t
 
	mnowaô
);

206 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

207 
ngx_uöt_t
 
	mÊags
);

209 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

210 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

211 } 
	tngx_evít_a˘i⁄s_t
;

214 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

221 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

227 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

233 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

239 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

245 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

250 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

255 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

260 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

266 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

272 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

278 
	#NGX_USE_FD_EVENT
 0x00000400

	)

284 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

290 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

295 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

308 
	#NGX_CLOSE_EVENT
 1

	)

314 
	#NGX_DISABLE_EVENT
 2

	)

319 
	#NGX_FLUSH_EVENT
 4

	)

323 
	#NGX_LOWAT_EVENT
 0

	)

324 
	#NGX_VNODE_EVENT
 0

	)

327 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_HAVE_EPOLLRDHUP
)

328 
	#EPOLLRDHUP
 0

	)

332 #i‡(
NGX_HAVE_KQUEUE
)

334 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

335 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

337 #unde‡
NGX_VNODE_EVENT


338 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

347 #unde‡
NGX_CLOSE_EVENT


348 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

350 #unde‡
NGX_LOWAT_EVENT


351 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

353 #unde‡
NGX_FLUSH_EVENT


354 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

356 
	#NGX_LEVEL_EVENT
 0

	)

357 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

358 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

360 #unde‡
NGX_DISABLE_EVENT


361 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

364 #ñi‡(
NGX_HAVE_DEVPOLL
 || 
NGX_HAVE_EVENTPORT
)

366 
	#NGX_READ_EVENT
 
POLLIN


	)

367 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

369 
	#NGX_LEVEL_EVENT
 0

	)

370 
	#NGX_ONESHOT_EVENT
 1

	)

373 #ñi‡(
NGX_HAVE_EPOLL
)

375 
	#NGX_READ_EVENT
 (
EPOLLIN
|
EPOLLRDHUP
)

	)

376 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

378 
	#NGX_LEVEL_EVENT
 0

	)

379 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

380 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

382 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

386 #ñi‡(
NGX_HAVE_POLL
)

388 
	#NGX_READ_EVENT
 
POLLIN


	)

389 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

391 
	#NGX_LEVEL_EVENT
 0

	)

392 
	#NGX_ONESHOT_EVENT
 1

	)

397 
	#NGX_READ_EVENT
 0

	)

398 
	#NGX_WRITE_EVENT
 1

	)

400 
	#NGX_LEVEL_EVENT
 0

	)

401 
	#NGX_ONESHOT_EVENT
 1

	)

406 #i‡(
NGX_HAVE_IOCP
)

407 
	#NGX_IOCP_ACCEPT
 0

	)

408 
	#NGX_IOCP_IO
 1

	)

409 
	#NGX_IOCP_CONNECT
 2

	)

413 #i‚de‡
NGX_CLEAR_EVENT


414 
	#NGX_CLEAR_EVENT
 0

	)

418 
	#ngx_¥o˚ss_ch™ges
 
ngx_evít_a˘i⁄s
.
¥o˚ss_ch™ges


	)

419 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

420 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

422 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

423 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

424 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

425 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

427 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

428 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

431 
ngx_os_io_t
 
ngx_io
;

433 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

434 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

435 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

436 
	#ngx_£nd
 
ngx_io
.
£nd


	)

437 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

440 
	#NGX_EVENT_MODULE
 0x544E5645

	)

441 
	#NGX_EVENT_CONF
 0x02000000

	)

445 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

446 
ngx_uöt_t
 
	mu£
;

448 
ngx_Êag_t
 
	mmu…i_ac˚±
;

449 
ngx_Êag_t
 
	mac˚±_muãx
;

451 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

453 
u_ch¨
 *
	m«me
;

455 #i‡(
NGX_DEBUG
)

456 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

458 } 
	tngx_evít_c⁄f_t
;

462 
ngx_°r_t
 *
	m«me
;

464 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

465 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

467 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

468 } 
	tngx_evít_moduÀ_t
;

471 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

473 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

474 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

475 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

476 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

477 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

478 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

479 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

482 #i‡(
NGX_STAT_STUB
)

484 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

485 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

486 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

487 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

488 
ngx_©omic_t
 *
ngx_°©_ªadög
;

489 
ngx_©omic_t
 *
ngx_°©_wrôög
;

490 
ngx_©omic_t
 *
ngx_°©_waôög
;

495 
	#NGX_UPDATE_TIME
 1

	)

496 
	#NGX_POST_EVENTS
 2

	)

499 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

500 
ngx_uöt_t
 
ngx_evít_Êags
;

501 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

502 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

505 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

506 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

510 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

511 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

512 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

515 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

516 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

517 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

520 #i‡(
NGX_WIN32
)

521 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

522 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

523 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

527 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

531 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

534 
	~<ngx_evít_timî.h
>

535 
	~<ngx_evít_po°ed.h
>

536 
	~<ngx_evít_busy_lock.h
>

538 #i‡(
NGX_WIN32
)

539 
	~<ngx_io˝_moduÀ.h
>

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event_busy_lock.h

8 #i‚de‡
_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

16 
ngx_evít_busy_lock_˘x_s
 
	tngx_evít_busy_lock_˘x_t
;

18 
	sngx_evít_busy_lock_˘x_s
 {

19 
ngx_evít_t
 *
	mevít
;

20 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

21 *
	md©a
;

22 
ngx_m£c_t
 
	mtimî
;

24 
	mlocked
:1;

25 
	mwaôög
:1;

26 
	mˇche_upd©ed
:1;

28 *
	mmd5
;

29 
ngx_öt_t
 
	m¶Ÿ
;

31 
ngx_evít_busy_lock_˘x_t
 *
	m√xt
;

36 
u_ch¨
 *
	mmd5_mask
;

37 *
	mmd5
;

38 
ngx_uöt_t
 
	mˇchóbÀ
;

40 
ngx_uöt_t
 
	mbusy
;

41 
ngx_uöt_t
 
	mmax_busy
;

43 
ngx_uöt_t
 
	mwaôög
;

44 
ngx_uöt_t
 
	mmax_waôög
;

46 
ngx_evít_busy_lock_˘x_t
 *
	mevíts
;

47 
ngx_evít_busy_lock_˘x_t
 *
	mœ°
;

49 #i‡(
NGX_THREADS
)

50 
ngx_muãx_t
 *
	mmuãx
;

52 } 
	tngx_evít_busy_lock_t
;

55 
ngx_öt_t
 
ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
,

56 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

57 
ngx_öt_t
 
ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

58 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

59 
ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

60 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

61 
ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

62 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 #i‡(
NGX_SSL
)

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

37 
	sngx_≥î_c⁄√˘i⁄_s
 {

38 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

40 
sockaddr
 *sockaddr;

41 
sockÀn_t
 
sockÀn
;

42 
ngx_°r_t
 *
«me
;

44 
ngx_uöt_t
 
åõs
;

45 
ngx_m£c_t
 
°¨t_time
;

47 
ngx_evít_gë_≥î_±
 
gë
;

48 
ngx_evít_‰ì_≥î_±
 
‰ì
;

49 *
d©a
;

51 #i‡(
NGX_SSL
)

52 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

53 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

56 #i‡(
NGX_THREADS
)

57 
ngx_©omic_t
 *
lock
;

60 
ngx_addr_t
 *
loˇl
;

62 
rcvbuf
;

64 
ngx_log_t
 *
log
;

66 
ˇched
:1;

69 
log_îr‹
:2;

73 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

74 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/bn.h
>

18 
	~<›ís¶/c⁄f.h
>

19 
	~<›ís¶/¸y±o.h
>

20 
	~<›ís¶/dh.h
>

21 #i‚de‡
OPENSSL_NO_ENGINE


22 
	~<›ís¶/ígöe.h
>

24 
	~<›ís¶/evp.h
>

25 #i‚de‡
OPENSSL_NO_OCSP


26 
	~<›ís¶/oc•.h
>

28 
	~<›ís¶/ønd.h
>

29 
	~<›ís¶/rß.h
>

30 
	~<›ís¶/x509.h
>

31 
	~<›ís¶/x509v3.h
>

33 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

36 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

37 
	#ngx_s¶_c⁄n_t
 
SSL


	)

41 
SSL_CTX
 *
	m˘x
;

42 
ngx_log_t
 *
	mlog
;

43 
size_t
 
	mbuf„r_size
;

44 } 
	tngx_s¶_t
;

48 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

50 
ngx_öt_t
 
	mœ°
;

51 
ngx_buf_t
 *
	mbuf
;

52 
size_t
 
	mbuf„r_size
;

54 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

56 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

57 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

59 
	mh™dshaked
:1;

60 
	mª√gŸüti⁄
:1;

61 
	mbuf„r
:1;

62 
	mno_waô_shutdown
:1;

63 
	mno_£nd_shutdown
:1;

64 
	mh™dshake_buf„r_£t
:1;

65 } 
	tngx_s¶_c⁄√˘i⁄_t
;

68 
	#NGX_SSL_NO_SCACHE
 -2

	)

69 
	#NGX_SSL_NONE_SCACHE
 -3

	)

70 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

71 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

74 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

76 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

78 
	sngx_s¶_£ss_id_s
 {

79 
ngx_rbåì_node_t
 
	mnode
;

80 
u_ch¨
 *
	mid
;

81 
size_t
 
	mÀn
;

82 
u_ch¨
 *
	m£ssi⁄
;

83 
ngx_queue_t
 
	mqueue
;

84 
time_t
 
	mexpúe
;

85 #i‡(
NGX_PTR_SIZE
 == 8)

86 *
	m°ub
;

87 
u_ch¨
 
	m£ss_id
[32];

93 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

94 
ngx_rbåì_node_t
 
	m£¡öñ
;

95 
ngx_queue_t
 
	mexpúe_queue
;

96 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

99 #ifde‡
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB


102 
u_ch¨
 
	m«me
[16];

103 
u_ch¨
 
	m´s_key
[16];

104 
u_ch¨
 
	mhmac_key
[16];

105 } 
	tngx_s¶_£ssi⁄_tickë_key_t
;

110 
	#NGX_SSL_SSLv2
 0x0002

	)

111 
	#NGX_SSL_SSLv3
 0x0004

	)

112 
	#NGX_SSL_TLSv1
 0x0008

	)

113 
	#NGX_SSL_TLSv1_1
 0x0010

	)

114 
	#NGX_SSL_TLSv1_2
 0x0020

	)

117 
	#NGX_SSL_BUFFER
 1

	)

118 
	#NGX_SSL_CLIENT
 2

	)

120 
	#NGX_SSL_BUFSIZE
 16384

	)

123 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

124 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

125 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

126 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
, 
ngx_¨øy_t
 *
∑ssw‹ds
);

127 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

128 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

129 
ngx_öt_t
 
ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

130 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

131 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

132 
ngx_öt_t
 
ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

133 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
);

134 
ngx_öt_t
 
ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

135 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
);

136 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
is_exp‹t
,

137 
key_Àngth
);

138 
ngx_¨øy_t
 *
ngx_s¶_ªad_∑ssw‹d_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûe
);

139 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

140 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

141 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

142 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

143 
ngx_öt_t
 
ngx_s¶_£ssi⁄_tickë_keys
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

144 
ngx_¨øy_t
 *
∑ths
);

145 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

146 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

147 
ngx_uöt_t
 
Êags
);

149 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

150 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

151 
	#ngx_s¶_gë_£ssi⁄
(
c
Ë
	`SSL_gë1_£ssi⁄
(c->
s¶
->
c⁄√˘i⁄
)

	)

152 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

153 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

154 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

155 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

156 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

158 
	#ngx_s¶_vîify_îr‹_›ti⁄Æ
(
n
) \

159 (
n
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 \

160 || 
n
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 \

161 || 
n
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 \

162 || 
n
 =
X509_V_ERR_CERT_UNTRUSTED
 \

163 || 
n
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)

	)

165 
ngx_öt_t
 
ngx_s¶_check_ho°
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
«me
);

168 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

169 
ngx_°r_t
 *
s
);

170 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

171 
ngx_°r_t
 *
s
);

172 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

173 
ngx_°r_t
 *
s
);

174 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_ªu£d
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

175 
ngx_°r_t
 *
s
);

176 
ngx_öt_t
 
ngx_s¶_gë_£rvî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

177 
ngx_°r_t
 *
s
);

178 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

179 
ngx_°r_t
 *
s
);

180 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

181 
ngx_°r_t
 *
s
);

182 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

183 
ngx_°r_t
 *
s
);

184 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

185 
ngx_°r_t
 *
s
);

186 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

187 
ngx_°r_t
 *
s
);

188 
ngx_öt_t
 
ngx_s¶_gë_fögî¥öt
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

189 
ngx_°r_t
 *
s
);

190 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

191 
ngx_°r_t
 *
s
);

194 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

195 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

196 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

197 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
);

198 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

199 
off_t
 
limô
);

200 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

201 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

202 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

203 *
fmt
, ...);

204 
ngx_s¶_˛ónup_˘x
(*
d©a
);

207 
ngx_s¶_c⁄√˘i⁄_ödex
;

208 
ngx_s¶_£rvî_c⁄f_ödex
;

209 
ngx_s¶_£ssi⁄_ˇche_ödex
;

210 
ngx_s¶_£ssi⁄_tickë_keys_ödex
;

211 
ngx_s¶_˚πifiˇã_ödex
;

212 
ngx_s¶_°≠lög_ödex
;

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
out
;

34 
ngx_chaö_t
 *
‰ì
;

35 
ngx_chaö_t
 *
busy
;

42 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

43 *
öput_˘x
;

45 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

46 *
ouçut_˘x
;

48 
ªad
:1;

49 
ˇchóbÀ
:1;

50 
sögÀ_buf
:1;

51 
‰ì_bufs
:1;

52 
up°ªam_d⁄e
:1;

53 
up°ªam_îr‹
:1;

54 
up°ªam_eof
:1;

55 
up°ªam_blocked
:1;

56 
down°ªam_d⁄e
:1;

57 
down°ªam_îr‹
:1;

58 
cy˛ic_ãmp_fûe
:1;

60 
ngx_öt_t
 
Æloˇãd
;

61 
ngx_bufs_t
 
bufs
;

62 
ngx_buf_èg_t
 
èg
;

64 
ssize_t
 
busy_size
;

66 
off_t
 
ªad_Àngth
;

67 
off_t
 
Àngth
;

69 
off_t
 
max_ãmp_fûe_size
;

70 
ssize_t
 
ãmp_fûe_wrôe_size
;

72 
ngx_m£c_t
 
ªad_timeout
;

73 
ngx_m£c_t
 
£nd_timeout
;

74 
ssize_t
 
£nd_low©
;

76 
ngx_poﬁ_t
 *
poﬁ
;

77 
ngx_log_t
 *
log
;

79 
ngx_chaö_t
 *
¥îód_bufs
;

80 
size_t
 
¥îód_size
;

81 
ngx_buf_t
 *
buf_to_fûe
;

83 
size_t
 
limô_øã
;

84 
time_t
 
°¨t_£c
;

86 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

88  
num
;

92 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

93 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

94 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#ngx_po°_evít
(
ev
, 
q
) \

19 i‡(!
ev
->
po°ed
) { \

20 
ev
->
po°ed
 = 1; \

21 
	`ngx_queue_ö£π_èû
(
q
, &
ev
->
queue
); \

23 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "postÉvent %p",Év); \

26 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

27 "upd©êpo°edÉvíà%p", 
ev
); \

28 }

	)

31 
	#ngx_dñëe_po°ed_evít
(
ev
) \

33 
ev
->
po°ed
 = 0; \

34 
	`ngx_queue_ªmove
(&
ev
->
queue
); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

37 "dñëêpo°edÉvíà%p", 
ev
);

	)

41 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_queue_t
 *
po°ed
);

44 
ngx_queue_t
 
ngx_po°ed_ac˚±_evíts
;

45 
ngx_queue_t
 
ngx_po°ed_evíts
;

	@/home/wuhong/github/google/ngx_google/src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

25 
ngx_evít_ˇn˚l_timîs
();

28 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

31 
ngx_ölöe
 

32 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

34 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

36 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

38 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

40 #i‡(
NGX_DEBUG
)

41 
ev
->
timî
.
À·
 = 
NULL
;

42 
ev
->
timî
.
right
 = 
NULL
;

43 
ev
->
timî
.
∑ª¡
 = 
NULL
;

46 
ev
->
timî_£t
 = 0;

47 
	}
}

50 
ngx_ölöe
 

51 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

53 
ngx_m£c_t
 
key
;

54 
ngx_m£c_öt_t
 
diff
;

56 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

58 i‡(
ev
->
timî_£t
) {

66 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

68 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

69 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

71 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

75 
	`ngx_dñ_timî
(
ev
);

78 
ev
->
timî
.
key
 = key;

80 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

82 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

84 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

86 
ev
->
timî_£t
 = 1;

87 
	}
}

	@/home/wuhong/github/google/ngx_google/src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
size_t
 
	mbuf„r_size
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

39 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

40 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

41 
ngx_°r_t
 
	m¸l
;

43 
ngx_°r_t
 
	mcùhîs
;

45 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

47 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

49 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

50 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

52 
ngx_Êag_t
 
	m°≠lög
;

53 
ngx_Êag_t
 
	m°≠lög_vîify
;

54 
ngx_°r_t
 
	m°≠lög_fûe
;

55 
ngx_°r_t
 
	m°≠lög_ª•⁄dî
;

57 
u_ch¨
 *
	mfûe
;

58 
ngx_uöt_t
 
	mlöe
;

59 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

62 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

21 
ngx_hâp_chunked_s
 
	tngx_hâp_chunked_t
;

23 #i‡(
NGX_HTTP_SPDY
)

24 
ngx_hâp_•dy_°ªam_s
 
	tngx_hâp_•dy_°ªam_t
;

27 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

28 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

29 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

30 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

33 
	~<ngx_hâp_v¨übÀs.h
>

34 
	~<ngx_hâp_c⁄fig.h
>

35 
	~<ngx_hâp_ªque°.h
>

36 
	~<ngx_hâp_s¸ùt.h
>

37 
	~<ngx_hâp_up°ªam.h
>

38 
	~<ngx_hâp_up°ªam_round_robö.h
>

39 
	~<ngx_hâp_busy_lock.h
>

40 
	~<ngx_hâp_c‹e_moduÀ.h
>

42 #i‡(
NGX_HTTP_SPDY
)

43 
	~<ngx_hâp_•dy.h
>

45 #i‡(
NGX_HTTP_CACHE
)

46 
	~<ngx_hâp_ˇche.h
>

48 #i‡(
NGX_HTTP_SSI
)

49 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

51 #i‡(
NGX_HTTP_SSL
)

52 
	~<ngx_hâp_s¶_moduÀ.h
>

56 
	sngx_hâp_log_˘x_s
 {

57 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

58 
ngx_hâp_ªque°_t
 *
ªque°
;

59 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

63 
	sngx_hâp_chunked_s
 {

64 
ngx_uöt_t
 
°©e
;

65 
off_t
 
size
;

66 
off_t
 
Àngth
;

71 
ngx_uöt_t
 
hâp_vîsi⁄
;

72 
ngx_uöt_t
 
code
;

73 
ngx_uöt_t
 
cou¡
;

74 
u_ch¨
 *
°¨t
;

75 
u_ch¨
 *
íd
;

76 } 
	tngx_hâp_°©us_t
;

79 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

80 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

83 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

84 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

85 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

86 
ngx_hâp_li°í_›t_t
 *
ls›t
);

89 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

90 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

92 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

93 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

96 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

97 
ngx_öt_t
 
	`ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
);

98 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_uöt_t
 
mîge_¶ashes
);

100 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

101 
ngx_hâp_°©us_t
 *
°©us
);

102 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

103 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

104 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

105 
ngx_uöt_t
 
Ælow_undîsc‹es
);

106 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

107 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

108 
ngx_öt_t
 
	`ngx_hâp_∑r£_£t_cookõ_löes
(
ngx_¨øy_t
 *
hódîs
,

109 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

110 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

111 
ngx_°r_t
 *
vÆue
);

112 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

113 
ngx_°r_t
 *
¨gs
);

114 
ngx_öt_t
 
	`ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

115 
ngx_hâp_chunked_t
 *
˘x
);

118 
ngx_hâp_ªque°_t
 *
	`ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
);

119 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
);

120 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

121 
	`ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

122 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

123 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

124 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

125 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

126 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

127 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

128 
	`ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

130 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

131 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

134 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

137 
	#NGX_HTTP_LAST
 1

	)

138 
	#NGX_HTTP_FLUSH
 2

	)

140 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

143 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

144 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

146 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

147 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_öt_t
 
îr‹
);

149 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

150 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

151 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

154 
time_t
 
	`ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

155 
size_t
 
	`ngx_hâp_gë_time
(*
buf
, 
time_t
 
t
);

159 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

160 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

161 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

162 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

165 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

166 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

167 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

168 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

169 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

170 
ngx_°r_t
 *
deÁu…_ty≥
);

172 #i‡(
NGX_HTTP_DEGRADATION
)

173 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

177 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

179 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

182 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

183 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_busy_lock.h

8 #i‚de‡
_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_hâp.h
>

19 
u_ch¨
 *
	mmd5_mask
;

20 *
	mmd5
;

21 
	mˇchóbÀ
;

23 
	mbusy
;

24 
	mmax_busy
;

26 
	mwaôög
;

27 
	mmax_waôög
;

29 
time_t
 
	mtimeout
;

31 
ngx_evít_muãx_t
 *
	mmuãx
;

32 } 
	tngx_hâp_busy_lock_t
;

36 
time_t
 
	mtime
;

37 
ngx_evít_t
 *
	mevít
;

38 (*
	mevít_h™dÀr
)(
ngx_evít_t
 *
	mev
);

39 
u_ch¨
 *
	mmd5
;

40 
	m¶Ÿ
;

41 } 
	tngx_hâp_busy_lock_˘x_t
;

44 
ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

45 
ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

46 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
);

47 
ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

48 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

50 *
ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_REVALIDATED
 6

	)

23 
	#NGX_HTTP_CACHE_HIT
 7

	)

24 
	#NGX_HTTP_CACHE_SCARCE
 8

	)

26 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

27 
	#NGX_HTTP_CACHE_ETAG_LEN
 42

	)

28 
	#NGX_HTTP_CACHE_VARY_LEN
 42

	)

30 
	#NGX_HTTP_CACHE_VERSION
 3

	)

34 
ngx_uöt_t
 
	m°©us
;

35 
time_t
 
	mvÆid
;

36 } 
	tngx_hâp_ˇche_vÆid_t
;

40 
ngx_rbåì_node_t
 
	mnode
;

41 
ngx_queue_t
 
	mqueue
;

43 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


44 - (
ngx_rbåì_key_t
)];

46 
	mcou¡
:20;

47 
	mu£s
:10;

48 
	mvÆid_m£c
:10;

49 
	mîr‹
:10;

50 
	mexi°s
:1;

51 
	mupd©ög
:1;

52 
	mdñëög
:1;

55 
ngx_fûe_uniq_t
 
	muniq
;

56 
time_t
 
	mexpúe
;

57 
time_t
 
	mvÆid_£c
;

58 
size_t
 
	mbody_°¨t
;

59 
off_t
 
	mfs_size
;

60 
ngx_m£c_t
 
	mlock_time
;

61 } 
	tngx_hâp_fûe_ˇche_node_t
;

64 
	sngx_hâp_ˇche_s
 {

65 
ngx_fûe_t
 
	mfûe
;

66 
ngx_¨øy_t
 
	mkeys
;

67 
uöt32_t
 
	m¸c32
;

68 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

69 
u_ch¨
 
	mmaö
[
NGX_HTTP_CACHE_KEY_LEN
];

71 
ngx_fûe_uniq_t
 
	muniq
;

72 
time_t
 
	mvÆid_£c
;

73 
time_t
 
	mœ°_modifõd
;

74 
time_t
 
	md©e
;

76 
ngx_°r_t
 
	mëag
;

77 
ngx_°r_t
 
	mv¨y
;

78 
u_ch¨
 
	mv¨ü¡
[
NGX_HTTP_CACHE_KEY_LEN
];

80 
size_t
 
	mhódî_°¨t
;

81 
size_t
 
	mbody_°¨t
;

82 
off_t
 
	mÀngth
;

83 
off_t
 
	mfs_size
;

85 
ngx_uöt_t
 
	mmö_u£s
;

86 
ngx_uöt_t
 
	mîr‹
;

87 
ngx_uöt_t
 
	mvÆid_m£c
;

89 
ngx_buf_t
 *
	mbuf
;

91 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

92 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

94 
ngx_m£c_t
 
	mlock_timeout
;

95 
ngx_m£c_t
 
	mlock_age
;

96 
ngx_m£c_t
 
	mlock_time
;

97 
ngx_m£c_t
 
	mwaô_time
;

99 
ngx_evít_t
 
	mwaô_evít
;

101 
	mlock
:1;

102 
	mwaôög
:1;

104 
	mupd©ed
:1;

105 
	mupd©ög
:1;

106 
	mexi°s
:1;

107 
	mãmp_fûe
:1;

108 
	mªadög
:1;

109 
	m£c⁄d¨y
:1;

114 
ngx_uöt_t
 
	mvîsi⁄
;

115 
time_t
 
	mvÆid_£c
;

116 
time_t
 
	mœ°_modifõd
;

117 
time_t
 
	md©e
;

118 
uöt32_t
 
	m¸c32
;

119 
u_sh‹t
 
	mvÆid_m£c
;

120 
u_sh‹t
 
	mhódî_°¨t
;

121 
u_sh‹t
 
	mbody_°¨t
;

122 
u_ch¨
 
	mëag_Àn
;

123 
u_ch¨
 
	mëag
[
NGX_HTTP_CACHE_ETAG_LEN
];

124 
u_ch¨
 
	mv¨y_Àn
;

125 
u_ch¨
 
	mv¨y
[
NGX_HTTP_CACHE_VARY_LEN
];

126 
u_ch¨
 
	mv¨ü¡
[
NGX_HTTP_CACHE_KEY_LEN
];

127 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

131 
ngx_rbåì_t
 
	mrbåì
;

132 
ngx_rbåì_node_t
 
	m£¡öñ
;

133 
ngx_queue_t
 
	mqueue
;

134 
ngx_©omic_t
 
	mcﬁd
;

135 
ngx_©omic_t
 
	mlﬂdög
;

136 
off_t
 
	msize
;

137 } 
	tngx_hâp_fûe_ˇche_sh_t
;

140 
	sngx_hâp_fûe_ˇche_s
 {

141 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

142 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

144 
ngx_∑th_t
 *
	m∑th
;

146 
off_t
 
	mmax_size
;

147 
size_t
 
	mbsize
;

149 
time_t
 
	möa˘ive
;

151 
ngx_uöt_t
 
	mfûes
;

152 
ngx_uöt_t
 
	mlﬂdî_fûes
;

153 
ngx_m£c_t
 
	mœ°
;

154 
ngx_m£c_t
 
	mlﬂdî_¶ìp
;

155 
ngx_m£c_t
 
	mlﬂdî_thªshﬁd
;

157 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

161 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

162 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

163 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

164 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

165 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

166 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

167 
ngx_hâp_fûe_ˇche_upd©e_hódî
(
ngx_hâp_ªque°_t
 *
r
);

168 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

169 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

170 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

172 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

173 *
c⁄f
);

174 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

175 *
c⁄f
);

178 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

18 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

19 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

20 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

21 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

22 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

23 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

24 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

25 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

28 
	#NGX_HTTP_AIO_OFF
 0

	)

29 
	#NGX_HTTP_AIO_ON
 1

	)

30 
	#NGX_HTTP_AIO_SENDFILE
 2

	)

33 
	#NGX_HTTP_SATISFY_ALL
 0

	)

34 
	#NGX_HTTP_SATISFY_ANY
 1

	)

37 
	#NGX_HTTP_LINGERING_OFF
 0

	)

38 
	#NGX_HTTP_LINGERING_ON
 1

	)

39 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

42 
	#NGX_HTTP_IMS_OFF
 0

	)

43 
	#NGX_HTTP_IMS_EXACT
 1

	)

44 
	#NGX_HTTP_IMS_BEFORE
 2

	)

47 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

48 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

49 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

52 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

53 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

58 
sockaddr
 
	msockaddr
;

59 
sockaddr_ö
 
	msockaddr_ö
;

60 #i‡(
NGX_HAVE_INET6
)

61 
sockaddr_ö6
 
	msockaddr_ö6
;

63 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

64 
sockaddr_un
 
	msockaddr_un
;

66 
u_ch¨
 
	msockaddr_d©a
[
NGX_SOCKADDRLEN
];

67 } 
	mu
;

69 
sockÀn_t
 
	msockÀn
;

71 
	m£t
:1;

72 
	mdeÁu…_£rvî
:1;

73 
	mböd
:1;

74 
	mwûdˇrd
:1;

75 #i‡(
NGX_HTTP_SSL
)

76 
	ms¶
:1;

78 #i‡(
NGX_HTTP_SPDY
)

79 
	m•dy
:1;

81 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

82 
	mùv6⁄ly
:1;

84 
	mso_kì∑live
:2;

85 
	m¥oxy_¥Ÿocﬁ
:1;

87 
	mbacklog
;

88 
	mrcvbuf
;

89 
	m¢dbuf
;

90 #i‡(
NGX_HAVE_SETFIB
)

91 
	m£tfib
;

93 #i‡(
NGX_HAVE_TCP_FASTOPEN
)

94 
	mÁ°›í
;

96 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

97 
	mt˝_kìpidÀ
;

98 
	mt˝_kìpötvl
;

99 
	mt˝_kìp˙t
;

102 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

103 *
	mac˚±_fûãr
;

105 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

106 
ngx_uöt_t
 
	mde„ºed_ac˚±
;

109 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

110 } 
	tngx_hâp_li°í_›t_t
;

114 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

116 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

118 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

119 
	mNGX_HTTP_REWRITE_PHASE
,

120 
	mNGX_HTTP_POST_REWRITE_PHASE
,

122 
	mNGX_HTTP_PREACCESS_PHASE
,

124 
	mNGX_HTTP_ACCESS_PHASE
,

125 
	mNGX_HTTP_POST_ACCESS_PHASE
,

127 
	mNGX_HTTP_TRY_FILES_PHASE
,

128 
	mNGX_HTTP_CONTENT_PHASE
,

130 
	mNGX_HTTP_LOG_PHASE


131 } 
	tngx_hâp_pha£s
;

133 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

135 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

136 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

138 
	sngx_hâp_pha£_h™dÀr_s
 {

139 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

140 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

141 
ngx_uöt_t
 
√xt
;

146 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

147 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

148 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

149 } 
	tngx_hâp_pha£_ígöe_t
;

153 
ngx_¨øy_t
 
h™dÀrs
;

154 } 
	tngx_hâp_pha£_t
;

158 
ngx_¨øy_t
 
£rvîs
;

160 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

162 
ngx_hash_t
 
hódîs_ö_hash
;

164 
ngx_hash_t
 
v¨übÀs_hash
;

166 
ngx_¨øy_t
 
v¨übÀs
;

167 
ngx_uöt_t
 
nˇ±uªs
;

169 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

170 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

172 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

173 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

175 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

177 
ngx_¨øy_t
 *
p‹ts
;

179 
ngx_uöt_t
 
åy_fûes
;

181 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

182 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

187 
ngx_¨øy_t
 
£rvî_«mes
;

190 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

192 
ngx_°r_t
 
£rvî_«me
;

194 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

195 
size_t
 
ªque°_poﬁ_size
;

196 
size_t
 
˛õ¡_hódî_buf„r_size
;

198 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

200 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

202 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

203 
ngx_Êag_t
 
mîge_¶ashes
;

204 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

206 
li°í
:1;

207 #i‡(
NGX_PCRE
)

208 
ˇ±uªs
:1;

211 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

212 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

219 #i‡(
NGX_PCRE
)

220 
ngx_hâp_ªgex_t
 *
ªgex
;

222 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

223 
ngx_°r_t
 
«me
;

224 } 
	tngx_hâp_£rvî_«me_t
;

228 
ngx_hash_comböed_t
 
«mes
;

230 
ngx_uöt_t
 
ƒegex
;

231 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

232 } 
	tngx_hâp_vútuÆ_«mes_t
;

235 
	sngx_hâp_addr_c⁄f_s
 {

237 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

239 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

241 #i‡(
NGX_HTTP_SSL
)

242 
s¶
:1;

244 #i‡(
NGX_HTTP_SPDY
)

245 
•dy
:1;

247 
¥oxy_¥Ÿocﬁ
:1;

252 
ö_addr_t
 
addr
;

253 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

254 } 
	tngx_hâp_ö_addr_t
;

257 #i‡(
NGX_HAVE_INET6
)

260 
ö6_addr
 
addr6
;

261 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

262 } 
	tngx_hâp_ö6_addr_t
;

269 *
addrs
;

270 
ngx_uöt_t
 
«ddrs
;

271 } 
	tngx_hâp_p‹t_t
;

275 
ngx_öt_t
 
Ámûy
;

276 
ö_p‹t_t
 
p‹t
;

277 
ngx_¨øy_t
 
addrs
;

278 } 
	tngx_hâp_c⁄f_p‹t_t
;

282 
ngx_hâp_li°í_›t_t
 
›t
;

284 
ngx_hash_t
 
hash
;

285 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

286 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

288 #i‡(
NGX_PCRE
)

289 
ngx_uöt_t
 
ƒegex
;

290 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

294 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

295 
ngx_¨øy_t
 
£rvîs
;

296 } 
	tngx_hâp_c⁄f_addr_t
;

300 
ngx_öt_t
 
°©us
;

301 
ngx_öt_t
 
ovîwrôe
;

302 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

303 
ngx_°r_t
 
¨gs
;

304 } 
	tngx_hâp_îr_∑ge_t
;

308 
ngx_¨øy_t
 *
Àngths
;

309 
ngx_¨øy_t
 *
vÆues
;

310 
ngx_°r_t
 
«me
;

312 
code
:10;

313 
ã°_dú
:1;

314 } 
	tngx_hâp_åy_fûe_t
;

317 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

318 
ngx_°r_t
 
«me
;

320 #i‡(
NGX_PCRE
)

321 
ngx_hâp_ªgex_t
 *
ªgex
;

324 
n⁄ame
:1;

325 
lmt_ex˝t
:1;

326 
«med
:1;

328 
exa˘_m©ch
:1;

329 
n‹egex
:1;

331 
auto_ªdúe˘
:1;

332 #i‡(
NGX_HTTP_GZIP
)

333 
gzù_dißbÀ_msõ6
:2;

334 #i‡(
NGX_HTTP_DEGRADATION
)

335 
gzù_dißbÀ_degød©i⁄
:2;

339 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

340 #i‡(
NGX_PCRE
)

341 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

345 **
loc_c⁄f
;

347 
uöt32_t
 
limô_ex˚±
;

348 **
limô_ex˚±_loc_c⁄f
;

350 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

353 
size_t
 
Æüs
;

354 
ngx_°r_t
 
roŸ
;

355 
ngx_°r_t
 
po°_a˘i⁄
;

357 
ngx_¨øy_t
 *
roŸ_Àngths
;

358 
ngx_¨øy_t
 *
roŸ_vÆues
;

360 
ngx_¨øy_t
 *
ty≥s
;

361 
ngx_hash_t
 
ty≥s_hash
;

362 
ngx_°r_t
 
deÁu…_ty≥
;

364 
off_t
 
˛õ¡_max_body_size
;

365 
off_t
 
dúe˘io
;

366 
off_t
 
dúe˘io_Æignmít
;

368 
size_t
 
˛õ¡_body_buf„r_size
;

369 
size_t
 
£nd_low©
;

370 
size_t
 
po°p⁄e_ouçut
;

371 
size_t
 
limô_øã
;

372 
size_t
 
limô_øã_a·î
;

373 
size_t
 
£ndfûe_max_chunk
;

374 
size_t
 
ªad_ahód
;

376 
ngx_m£c_t
 
˛õ¡_body_timeout
;

377 
ngx_m£c_t
 
£nd_timeout
;

378 
ngx_m£c_t
 
kì∑live_timeout
;

379 
ngx_m£c_t
 
lögîög_time
;

380 
ngx_m£c_t
 
lögîög_timeout
;

381 
ngx_m£c_t
 
ªsﬁvî_timeout
;

383 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

385 
time_t
 
kì∑live_hódî
;

387 
ngx_uöt_t
 
kì∑live_ªque°s
;

388 
ngx_uöt_t
 
kì∑live_dißbÀ
;

389 
ngx_uöt_t
 
ßtisfy
;

390 
ngx_uöt_t
 
lögîög_˛o£
;

391 
ngx_uöt_t
 
if_modifõd_sö˚
;

392 
ngx_uöt_t
 
max_ønges
;

393 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

395 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

397 
ngx_Êag_t
 
öã∫Æ
;

398 
ngx_Êag_t
 
£ndfûe
;

399 #i‡(
NGX_HAVE_FILE_AIO
)

400 
ngx_Êag_t
 
aio
;

402 
ngx_Êag_t
 
t˝_n›ush
;

403 
ngx_Êag_t
 
t˝_nodñay
;

404 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

405 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

406 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

407 
ngx_Êag_t
 
msõ_∑ddög
;

408 
ngx_Êag_t
 
msõ_ª‰esh
;

409 
ngx_Êag_t
 
log_nŸ_found
;

410 
ngx_Êag_t
 
log_subªque°
;

411 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

412 
ngx_Êag_t
 
£rvî_tokís
;

413 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

414 
ngx_Êag_t
 
ëag
;

416 #i‡(
NGX_HTTP_GZIP
)

417 
ngx_Êag_t
 
gzù_v¨y
;

419 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

420 
ngx_uöt_t
 
gzù_¥oxõd
;

422 #i‡(
NGX_PCRE
)

423 
ngx_¨øy_t
 *
gzù_dißbÀ
;

427 #i‡(
NGX_HAVE_OPENAT
)

428 
ngx_uöt_t
 
dißbÀ_symlöks
;

429 
ngx_hâp_com∂ex_vÆue_t
 *
dißbÀ_symlöks_‰om
;

432 
ngx_¨øy_t
 *
îr‹_∑ges
;

433 
ngx_hâp_åy_fûe_t
 *
åy_fûes
;

435 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

437 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

438 
time_t
 
›í_fûe_ˇche_vÆid
;

439 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

440 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

441 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

443 
ngx_log_t
 *
îr‹_log
;

445 
ngx_uöt_t
 
ty≥s_hash_max_size
;

446 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

448 
ngx_queue_t
 *
loˇti⁄s
;

451 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

457 
ngx_queue_t
 
queue
;

458 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

459 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

460 
ngx_°r_t
 *
«me
;

461 
u_ch¨
 *
fûe_«me
;

462 
ngx_uöt_t
 
löe
;

463 
ngx_queue_t
 
li°
;

464 } 
	tngx_hâp_loˇti⁄_queue_t
;

467 
	sngx_hâp_loˇti⁄_åì_node_s
 {

468 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

469 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

470 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

472 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

473 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

475 
u_ch¨
 
auto_ªdúe˘
;

476 
u_ch¨
 
Àn
;

477 
u_ch¨
 
«me
[1];

481 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

482 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

483 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

484 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

485 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

486 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

487 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

488 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

489 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

490 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

491 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

492 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

493 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

494 
ngx_öt_t
 
	`ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

495 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

496 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

497 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

500 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

501 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

502 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

503 
ngx_öt_t
 
	`ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
);

504 
	`ngx_hâp_wók_ëag
(
ngx_hâp_ªque°_t
 *
r
);

505 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

506 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

507 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

508 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

509 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

510 #i‡(
NGX_HTTP_GZIP
)

511 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

515 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

516 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

517 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

518 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

519 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

520 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

523 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

526 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

527 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

528 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

531 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

532 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

535 
ngx_öt_t
 
	`ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
);

538 
ngx_öt_t
 
	`ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

539 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

540 
ªcursive
);

543 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

545 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

547 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

550 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

552 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

553 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

554 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

555 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

556 
	}

	)
}

558 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

560 
r
->
Ælow_ønges
 = 0; \

561 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

562 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

563 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

564 }

	)

566 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

568 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

569 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

570 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

571 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

572 }

	)

574 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

576 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

577 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

578 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

579 }

	)

581 
	#ngx_hâp_˛ór_ëag
(
r
) \

583 i‡(
r
->
hódîs_out
.
ëag
) { \

584 
r
->
hódîs_out
.
ëag
->
hash
 = 0; \

585 
r
->
hódîs_out
.
ëag
 = 
NULL
; \

586 }

	)

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 200

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

27 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

28 
	#NGX_HTTP_GET
 0x0002

	)

29 
	#NGX_HTTP_HEAD
 0x0004

	)

30 
	#NGX_HTTP_POST
 0x0008

	)

31 
	#NGX_HTTP_PUT
 0x0010

	)

32 
	#NGX_HTTP_DELETE
 0x0020

	)

33 
	#NGX_HTTP_MKCOL
 0x0040

	)

34 
	#NGX_HTTP_COPY
 0x0080

	)

35 
	#NGX_HTTP_MOVE
 0x0100

	)

36 
	#NGX_HTTP_OPTIONS
 0x0200

	)

37 
	#NGX_HTTP_PROPFIND
 0x0400

	)

38 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

39 
	#NGX_HTTP_LOCK
 0x1000

	)

40 
	#NGX_HTTP_UNLOCK
 0x2000

	)

41 
	#NGX_HTTP_PATCH
 0x4000

	)

42 
	#NGX_HTTP_TRACE
 0x8000

	)

44 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

45 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

48 
	#NGX_NONE
 1

	)

51 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

53 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

54 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

56 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_HEADER
 13

	)

62 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

63 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

64 
	#NGX_HTTP_LOG_UNSAFE
 8

	)

67 
	#NGX_HTTP_CONTINUE
 100

	)

68 
	#NGX_HTTP_SWITCHING_PROTOCOLS
 101

	)

69 
	#NGX_HTTP_PROCESSING
 102

	)

71 
	#NGX_HTTP_OK
 200

	)

72 
	#NGX_HTTP_CREATED
 201

	)

73 
	#NGX_HTTP_ACCEPTED
 202

	)

74 
	#NGX_HTTP_NO_CONTENT
 204

	)

75 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

77 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

78 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

79 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

80 
	#NGX_HTTP_SEE_OTHER
 303

	)

81 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

82 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

84 
	#NGX_HTTP_BAD_REQUEST
 400

	)

85 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

86 
	#NGX_HTTP_FORBIDDEN
 403

	)

87 
	#NGX_HTTP_NOT_FOUND
 404

	)

88 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

89 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

90 
	#NGX_HTTP_CONFLICT
 409

	)

91 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

92 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

93 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

94 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

95 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

96 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

102 
	#NGX_HTTP_CLOSE
 444

	)

104 
	#NGX_HTTP_NGINX_CODES
 494

	)

106 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

108 
	#NGX_HTTPS_CERT_ERROR
 495

	)

109 
	#NGX_HTTPS_NO_CERT
 496

	)

115 
	#NGX_HTTP_TO_HTTPS
 497

	)

125 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

128 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

129 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

130 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

131 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

132 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

133 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

136 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

137 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

138 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

139 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

140 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

141 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

145 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

146 
	mNGX_HTTP_READING_REQUEST_STATE
,

147 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

149 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

150 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

151 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

153 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

154 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

155 
	mNGX_HTTP_KEEPALIVE_STATE


156 } 
	tngx_hâp_°©e_e
;

160 
ngx_°r_t
 
	m«me
;

161 
ngx_uöt_t
 
	moff£t
;

162 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

163 } 
	tngx_hâp_hódî_t
;

167 
ngx_°r_t
 
	m«me
;

168 
ngx_uöt_t
 
	moff£t
;

169 } 
	tngx_hâp_hódî_out_t
;

173 
ngx_li°_t
 
	mhódîs
;

175 
ngx_èbÀ_ñt_t
 *
	mho°
;

176 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

177 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

178 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

179 
ngx_èbÀ_ñt_t
 *
	mif_m©ch
;

180 
ngx_èbÀ_ñt_t
 *
	mif_n⁄e_m©ch
;

181 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

182 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

183 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

184 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

186 
ngx_èbÀ_ñt_t
 *
	mønge
;

187 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

189 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

190 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

191 
ngx_èbÀ_ñt_t
 *
	mupgøde
;

193 #i‡(
NGX_HTTP_GZIP
)

194 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

195 
ngx_èbÀ_ñt_t
 *
	mvü
;

198 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

200 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

202 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

203 
ngx_¨øy_t
 
	mx_f‹w¨ded_f‹
;

206 #i‡(
NGX_HTTP_REALIP
)

207 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

210 #i‡(
NGX_HTTP_HEADERS
)

211 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

212 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

215 #i‡(
NGX_HTTP_DAV
)

216 
ngx_èbÀ_ñt_t
 *
	mdïth
;

217 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

218 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

219 
ngx_èbÀ_ñt_t
 *
	md©e
;

222 
ngx_°r_t
 
	mu£r
;

223 
ngx_°r_t
 
	m∑sswd
;

225 
ngx_¨øy_t
 
	mcookõs
;

227 
ngx_°r_t
 
	m£rvî
;

228 
off_t
 
	mc⁄ã¡_Àngth_n
;

229 
time_t
 
	mkìp_Æive_n
;

231 
	mc⁄√˘i⁄_ty≥
:2;

232 
	mchunked
:1;

233 
	mmsõ
:1;

234 
	mmsõ6
:1;

235 
	m›îa
:1;

236 
	mgecko
:1;

237 
	mchrome
:1;

238 
	mßÁri
:1;

239 
	mk⁄quî‹
:1;

240 } 
	tngx_hâp_hódîs_ö_t
;

244 
ngx_li°_t
 
	mhódîs
;

246 
ngx_uöt_t
 
	m°©us
;

247 
ngx_°r_t
 
	m°©us_löe
;

249 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

250 
ngx_èbÀ_ñt_t
 *
	md©e
;

251 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

252 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

253 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

254 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

255 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

256 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

257 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

258 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

259 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

260 
ngx_èbÀ_ñt_t
 *
	mëag
;

262 
ngx_°r_t
 *
	movîride_ch¨£t
;

264 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

265 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

266 
ngx_°r_t
 
	mch¨£t
;

267 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

268 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

270 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

272 
off_t
 
	mc⁄ã¡_Àngth_n
;

273 
time_t
 
	md©e_time
;

274 
time_t
 
	mœ°_modifõd_time
;

275 } 
	tngx_hâp_hódîs_out_t
;

278 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

281 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

282 
ngx_chaö_t
 *
bufs
;

283 
ngx_buf_t
 *
buf
;

284 
off_t
 
ª°
;

285 
ngx_chaö_t
 *
‰ì
;

286 
ngx_chaö_t
 *
busy
;

287 
ngx_hâp_chunked_t
 *
chunked
;

288 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

289 } 
	tngx_hâp_ªque°_body_t
;

292 
ngx_hâp_addr_c⁄f_s
 
	tngx_hâp_addr_c⁄f_t
;

295 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

296 
ngx_hâp_c⁄f_˘x_t
 *
c⁄f_˘x
;

298 #i‡(
NGX_HTTP_SSL
 && 
deföed
 
SSL_CTRL_SET_TLSEXT_HOSTNAME
)

299 
ngx_°r_t
 *
s¶_£rvî«me
;

300 #i‡(
NGX_PCRE
)

301 
ngx_hâp_ªgex_t
 *
s¶_£rvî«me_ªgex
;

305 
ngx_buf_t
 **
busy
;

306 
ngx_öt_t
 
nbusy
;

308 
ngx_buf_t
 **
‰ì
;

309 
ngx_öt_t
 
n‰ì
;

311 #i‡(
NGX_HTTP_SSL
)

312 
s¶
:1;

314 
¥oxy_¥Ÿocﬁ
:1;

315 } 
	tngx_hâp_c⁄√˘i⁄_t
;

318 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

320 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

322 
	sngx_hâp_˛ónup_s
 {

323 
ngx_hâp_˛ónup_±
 
h™dÀr
;

324 *
d©a
;

325 
ngx_hâp_˛ónup_t
 *
√xt
;

329 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

330 *
	td©a
, 
	tngx_öt_t
 
	trc
);

333 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

334 *
d©a
;

335 } 
	tngx_hâp_po°_subªque°_t
;

338 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

340 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

341 
ngx_hâp_ªque°_t
 *
ªque°
;

342 
ngx_chaö_t
 *
out
;

343 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

347 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

349 
	sngx_hâp_po°ed_ªque°_s
 {

350 
ngx_hâp_ªque°_t
 *
ªque°
;

351 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

355 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

356 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

359 
	sngx_hâp_ªque°_s
 {

360 
uöt32_t
 
sig«tuª
;

362 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

364 **
˘x
;

365 **
maö_c⁄f
;

366 **
§v_c⁄f
;

367 **
loc_c⁄f
;

369 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

370 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

372 #i‡(
NGX_HTTP_CACHE
)

373 
ngx_hâp_ˇche_t
 *
ˇche
;

376 
ngx_hâp_up°ªam_t
 *
up°ªam
;

377 
ngx_¨øy_t
 *
up°ªam_°©es
;

380 
ngx_poﬁ_t
 *
poﬁ
;

381 
ngx_buf_t
 *
hódî_ö
;

383 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

384 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

386 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

388 
time_t
 
lögîög_time
;

389 
time_t
 
°¨t_£c
;

390 
ngx_m£c_t
 
°¨t_m£c
;

392 
ngx_uöt_t
 
mëhod
;

393 
ngx_uöt_t
 
hâp_vîsi⁄
;

395 
ngx_°r_t
 
ªque°_löe
;

396 
ngx_°r_t
 
uri
;

397 
ngx_°r_t
 
¨gs
;

398 
ngx_°r_t
 
exãn
;

399 
ngx_°r_t
 
u≈¨£d_uri
;

401 
ngx_°r_t
 
mëhod_«me
;

402 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

404 
ngx_chaö_t
 *
out
;

405 
ngx_hâp_ªque°_t
 *
maö
;

406 
ngx_hâp_ªque°_t
 *
∑ª¡
;

407 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

408 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

409 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

411 
ngx_öt_t
 
pha£_h™dÀr
;

412 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

413 
ngx_uöt_t
 
ac˚ss_code
;

415 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

417 #i‡(
NGX_PCRE
)

418 
ngx_uöt_t
 
nˇ±uªs
;

419 *
ˇ±uªs
;

420 
u_ch¨
 *
ˇ±uªs_d©a
;

423 
size_t
 
limô_øã
;

424 
size_t
 
limô_øã_a·î
;

427 
size_t
 
hódî_size
;

429 
off_t
 
ªque°_Àngth
;

431 
ngx_uöt_t
 
îr_°©us
;

433 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

434 #i‡(
NGX_HTTP_SPDY
)

435 
ngx_hâp_•dy_°ªam_t
 *
•dy_°ªam
;

438 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

440 
ngx_hâp_˛ónup_t
 *
˛ónup
;

442 
subªque°s
:8;

443 
cou¡
:8;

444 
blocked
:8;

446 
aio
:1;

448 
hâp_°©e
:4;

451 
com∂ex_uri
:1;

454 
quŸed_uri
:1;

457 
∂us_ö_uri
:1;

460 
•a˚_ö_uri
:1;

462 
övÆid_hódî
:1;

464 
add_uri_to_Æüs
:1;

465 
vÆid_loˇti⁄
:1;

466 
vÆid_u≈¨£d_uri
:1;

467 
uri_ch™ged
:1;

468 
uri_ch™ges
:4;

470 
ªque°_body_ö_sögÀ_buf
:1;

471 
ªque°_body_ö_fûe_⁄ly
:1;

472 
ªque°_body_ö_≥rsi°ít_fûe
:1;

473 
ªque°_body_ö_˛ón_fûe
:1;

474 
ªque°_body_fûe_group_ac˚ss
:1;

475 
ªque°_body_fûe_log_Àvñ
:3;

477 
subªque°_ö_mem‹y
:1;

478 
waôed
:1;

480 #i‡(
NGX_HTTP_CACHE
)

481 
ˇched
:1;

484 #i‡(
NGX_HTTP_GZIP
)

485 
gzù_ã°ed
:1;

486 
gzù_ok
:1;

487 
gzù_v¨y
:1;

490 
¥oxy
:1;

491 
by∑ss_ˇche
:1;

492 
no_ˇche
:1;

499 
limô_c⁄n_£t
:1;

500 
limô_ªq_£t
:1;

503 
ˇchóbÀ
:1;

506 
pùñöe
:1;

507 
chunked
:1;

508 
hódî_⁄ly
:1;

509 
kì∑live
:1;

510 
lögîög_˛o£
:1;

511 
disˇrd_body
:1;

512 
öã∫Æ
:1;

513 
îr‹_∑ge
:1;

514 
fûãr_föÆize
:1;

515 
po°_a˘i⁄
:1;

516 
ªque°_com∂ëe
:1;

517 
ªque°_ouçut
:1;

518 
hódî_£¡
:1;

519 
ex≥˘_ã°ed
:1;

520 
roŸ_ã°ed
:1;

521 
d⁄e
:1;

522 
logged
:1;

524 
buf„ªd
:4;

526 
maö_fûãr_√ed_ö_mem‹y
:1;

527 
fûãr_√ed_ö_mem‹y
:1;

528 
fûãr_√ed_ãmp‹¨y
:1;

529 
Ælow_ønges
:1;

530 
sögÀ_ønge
:1;

531 
dißbÀ_nŸ_modifõd
:1;

533 #i‡(
NGX_STAT_STUB
)

534 
°©_ªadög
:1;

535 
°©_wrôög
:1;

540 
ngx_uöt_t
 
°©e
;

542 
ngx_uöt_t
 
hódî_hash
;

543 
ngx_uöt_t
 
lowˇ£_ödex
;

544 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

546 
u_ch¨
 *
hódî_«me_°¨t
;

547 
u_ch¨
 *
hódî_«me_íd
;

548 
u_ch¨
 *
hódî_°¨t
;

549 
u_ch¨
 *
hódî_íd
;

556 
u_ch¨
 *
uri_°¨t
;

557 
u_ch¨
 *
uri_íd
;

558 
u_ch¨
 *
uri_ext
;

559 
u_ch¨
 *
¨gs_°¨t
;

560 
u_ch¨
 *
ªque°_°¨t
;

561 
u_ch¨
 *
ªque°_íd
;

562 
u_ch¨
 *
mëhod_íd
;

563 
u_ch¨
 *
schema_°¨t
;

564 
u_ch¨
 *
schema_íd
;

565 
u_ch¨
 *
ho°_°¨t
;

566 
u_ch¨
 *
ho°_íd
;

567 
u_ch¨
 *
p‹t_°¨t
;

568 
u_ch¨
 *
p‹t_íd
;

570 
hâp_mö‹
:16;

571 
hâp_maj‹
:16;

576 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

577 #i‡(
NGX_HAVE_AIO_SENDFILE
)

578 
u_ch¨
 
aio_¥ñﬂd
;

580 } 
	tngx_hâp_ïhemîÆ_t
;

583 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

584 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

587 
	#ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
l
) \

589 
c
->
log
->
fûe
 = 
l
->file; \

590 
c
->
log
->
√xt
 = 
l
->next; \

591 
c
->
log
->
wrôî
 = 
l
->writer; \

592 
c
->
log
->
wd©a
 = 
l
->wdata; \

593 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) { \

594 
c
->
log
->
log_Àvñ
 = 
l
->log_level; \

595 
	}

	)
}

598 
	#ngx_hâp_£t_log_ªque°
(
log
, 
r
) \

599 ((
ngx_hâp_log_˘x_t
 *Ë
log
->
d©a
)->
cuºít_ªque°
 = 
r


	)

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
uöçå_t
 
ã°
:1;

125 
uöçå_t
 
√g©ive_ã°
:1;

126 
uöçå_t
 
uri
:1;

127 
uöçå_t
 
¨gs
:1;

130 
uöçå_t
 
add_¨gs
:1;

132 
uöçå_t
 
ªdúe˘
:1;

133 
uöçå_t
 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uöçå_t
 
uri
:1;

143 
uöçå_t
 
¨gs
:1;

146 
uöçå_t
 
add_¨gs
:1;

148 
uöçå_t
 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_spdy.h

7 #i‚de‡
_NGX_HTTP_SPDY_H_INCLUDED_


8 
	#_NGX_HTTP_SPDY_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_hâp.h
>

15 
	~<zlib.h
>

18 
	#NGX_SPDY_VERSION
 3

	)

20 
	#NGX_SPDY_NPN_ADVERTISE
 "\x08•dy/3.1"

	)

21 
	#NGX_SPDY_NPN_NEGOTIATED
 "•dy/3.1"

	)

23 
	#NGX_SPDY_STATE_BUFFER_SIZE
 16

	)

25 
	#NGX_SPDY_CTL_BIT
 1

	)

27 
	#NGX_SPDY_SYN_STREAM
 1

	)

28 
	#NGX_SPDY_SYN_REPLY
 2

	)

29 
	#NGX_SPDY_RST_STREAM
 3

	)

30 
	#NGX_SPDY_SETTINGS
 4

	)

31 
	#NGX_SPDY_PING
 6

	)

32 
	#NGX_SPDY_GOAWAY
 7

	)

33 
	#NGX_SPDY_HEADERS
 8

	)

34 
	#NGX_SPDY_WINDOW_UPDATE
 9

	)

36 
	#NGX_SPDY_FRAME_HEADER_SIZE
 8

	)

38 
	#NGX_SPDY_SID_SIZE
 4

	)

39 
	#NGX_SPDY_DELTA_SIZE
 4

	)

41 
	#NGX_SPDY_SYN_STREAM_SIZE
 10

	)

42 
	#NGX_SPDY_SYN_REPLY_SIZE
 4

	)

43 
	#NGX_SPDY_RST_STREAM_SIZE
 8

	)

44 
	#NGX_SPDY_PING_SIZE
 4

	)

45 
	#NGX_SPDY_GOAWAY_SIZE
 8

	)

46 
	#NGX_SPDY_WINDOW_UPDATE_SIZE
 8

	)

47 
	#NGX_SPDY_NV_NUM_SIZE
 4

	)

48 
	#NGX_SPDY_NV_NLEN_SIZE
 4

	)

49 
	#NGX_SPDY_NV_VLEN_SIZE
 4

	)

50 
	#NGX_SPDY_SETTINGS_NUM_SIZE
 4

	)

51 
	#NGX_SPDY_SETTINGS_FID_SIZE
 4

	)

52 
	#NGX_SPDY_SETTINGS_VAL_SIZE
 4

	)

54 
	#NGX_SPDY_SETTINGS_PAIR_SIZE
 \

55 (
NGX_SPDY_SETTINGS_FID_SIZE
 + 
NGX_SPDY_SETTINGS_VAL_SIZE
)

	)

57 
	#NGX_SPDY_HIGHEST_PRIORITY
 0

	)

58 
	#NGX_SPDY_LOWEST_PRIORITY
 7

	)

60 
	#NGX_SPDY_FLAG_FIN
 0x01

	)

61 
	#NGX_SPDY_FLAG_UNIDIRECTIONAL
 0x02

	)

62 
	#NGX_SPDY_FLAG_CLEAR_SETTINGS
 0x01

	)

64 
	#NGX_SPDY_MAX_FRAME_SIZE
 ((1 << 24Ë- 1)

	)

66 
	#NGX_SPDY_DATA_DISCARD
 1

	)

67 
	#NGX_SPDY_DATA_ERROR
 2

	)

68 
	#NGX_SPDY_DATA_INTERNAL_ERROR
 3

	)

71 
ngx_hâp_•dy_c⁄√˘i⁄_s
 
	tngx_hâp_•dy_c⁄√˘i⁄_t
;

72 
ngx_hâp_•dy_out_‰ame_s
 
	tngx_hâp_•dy_out_‰ame_t
;

75 
	gu_ch¨
 *(*
	tngx_hâp_•dy_h™dÀr_±
Ë(
	tngx_hâp_•dy_c⁄√˘i⁄_t
 *
	tsc
,

76 
	tu_ch¨
 *
	tpos
, u_ch¨ *
	tíd
);

78 
	sngx_hâp_•dy_c⁄√˘i⁄_s
 {

79 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

80 
ngx_hâp_c⁄√˘i⁄_t
 *
	mhâp_c⁄√˘i⁄
;

82 
ngx_uöt_t
 
	m¥o˚ssög
;

84 
size_t
 
	m£nd_wödow
;

85 
size_t
 
	mªcv_wödow
;

86 
size_t
 
	möô_wödow
;

88 
ngx_queue_t
 
	mwaôög
;

90 
u_ch¨
 
	mbuf„r
[
NGX_SPDY_STATE_BUFFER_SIZE
];

91 
size_t
 
	mbuf„r_u£d
;

92 
ngx_hâp_•dy_h™dÀr_±
 
	mh™dÀr
;

94 
z_°ªam
 
	mz°ªam_ö
;

95 
z_°ªam
 
	mz°ªam_out
;

97 
ngx_poﬁ_t
 *
	mpoﬁ
;

99 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_˘l_‰ames
;

100 
ngx_c⁄√˘i⁄_t
 *
	m‰ì_Áke_c⁄√˘i⁄s
;

102 
ngx_hâp_•dy_°ªam_t
 **
	m°ªams_ödex
;

104 
ngx_hâp_•dy_out_‰ame_t
 *
	mœ°_out
;

106 
ngx_queue_t
 
	mpo°ed
;

108 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

110 
ngx_uöt_t
 
	míåõs
;

111 
size_t
 
	mÀngth
;

112 
u_ch¨
 
	mÊags
;

114 
ngx_uöt_t
 
	mœ°_sid
;

116 
	mblocked
:1;

117 
	möcom∂ëe
:1;

121 
	sngx_hâp_•dy_°ªam_s
 {

122 
ngx_uöt_t
 
	mid
;

123 
ngx_hâp_ªque°_t
 *
	mªque°
;

124 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

125 
ngx_hâp_•dy_°ªam_t
 *
	mödex
;

127 
ngx_uöt_t
 
	mhódî_buf„rs
;

128 
ngx_uöt_t
 
	mqueued
;

134 
ssize_t
 
	m£nd_wödow
;

135 
size_t
 
	mªcv_wödow
;

137 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_‰ames
;

138 
ngx_chaö_t
 *
	m‰ì_d©a_hódîs
;

139 
ngx_chaö_t
 *
	m‰ì_bufs
;

141 
ngx_queue_t
 
	mqueue
;

143 
	m¥i‹ôy
:3;

144 
	mh™dÀd
:1;

145 
	mblocked
:1;

146 
	mexhau°ed
:1;

147 
	mö_˛o£d
:1;

148 
	mout_˛o£d
:1;

149 
	mskù_d©a
:2;

153 
	sngx_hâp_•dy_out_‰ame_s
 {

154 
ngx_hâp_•dy_out_‰ame_t
 *
	m√xt
;

155 
ngx_chaö_t
 *
	mfú°
;

156 
ngx_chaö_t
 *
	mœ°
;

157 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	msc
,

158 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ame
);

160 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

161 
size_t
 
	mÀngth
;

163 
ngx_uöt_t
 
	m¥i‹ôy
;

164 
	mblocked
:1;

165 
	mfö
:1;

169 
ngx_ölöe
 

170 
	$ngx_hâp_•dy_queue_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

171 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

173 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

175 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

180 i‡(
‰ame
->
¥i‹ôy
 >(*
out
)->priority) {

185 
‰ame
->
√xt
 = *
out
;

186 *
out
 = 
‰ame
;

187 
	}
}

190 
ngx_ölöe
 

191 
	$ngx_hâp_•dy_queue_blocked_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

192 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

194 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

196 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

198 i‡((*
out
)->
blocked
) {

203 
‰ame
->
√xt
 = *
out
;

204 *
out
 = 
‰ame
;

205 
	}
}

208 
ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
);

209 
ngx_hâp_•dy_ªque°_hódîs_öô
();

211 
ngx_öt_t
 
ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

212 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

214 
ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
);

216 
ngx_öt_t
 
ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

219 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt16
(
p
, 
s
) \

220 (*(
uöt16_t
 *Ë(
p
Ë
	`ht⁄s
((uöt16_tË(
s
)), (pË+ (uöt16_t))

	)

222 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
s
) \

223 (*(
uöt32_t
 *Ë(
p
Ë
	`ht⁄l
((uöt32_tË(
s
)), (pË+ (uöt32_t))

	)

225 #i‡(
NGX_HAVE_NONALIGNED
)

227 
	#ngx_•dy_‰ame_wrôe_uöt16
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt16


	)

228 
	#ngx_•dy_‰ame_wrôe_uöt32
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

232 
	#ngx_•dy_‰ame_wrôe_uöt16
(
p
, 
s
) \

233 ((
p
)[0] = (
u_ch¨
Ë((
s
) >> 8), \

234 (
p
)[1] = (
u_ch¨
Ë(
s
), \

235 (
p
Ë+ (
uöt16_t
))

	)

237 
	#ngx_•dy_‰ame_wrôe_uöt32
(
p
, 
s
) \

238 ((
p
)[0] = (
u_ch¨
Ë((
s
) >> 24), \

239 (
p
)[1] = (
u_ch¨
Ë((
s
) >> 16), \

240 (
p
)[2] = (
u_ch¨
Ë((
s
) >> 8), \

241 (
p
)[3] = (
u_ch¨
Ë(
s
), \

242 (
p
Ë+ (
uöt32_t
))

	)

247 
	#ngx_•dy_˘l_‰ame_hód
(
t
) \

248 ((
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31 | 
NGX_SPDY_VERSION
 << 16 | (
t
))

	)

250 
	#ngx_•dy_‰ame_wrôe_hód
(
p
, 
t
) \

251 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
	`ngx_•dy_˘l_‰ame_hód
(
t
))

	)

253 
	#ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
f
, 
l
) \

254 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
l
))

	)

255 
	#ngx_•dy_‰ame_wrôe_Êags_™d_id
(
p
, 
f
, 
i
) \

256 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
i
))

	)

258 
	#ngx_•dy_‰ame_wrôe_sid
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

259 
	#ngx_•dy_‰ame_wrôe_wödow
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_spdy_module.h

8 #i‚de‡
_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
size_t
 
	mªcv_buf„r_size
;

19 
u_ch¨
 *
	mªcv_buf„r
;

20 } 
	tngx_hâp_•dy_maö_c⁄f_t
;

24 
size_t
 
	mpoﬁ_size
;

25 
ngx_uöt_t
 
	mc⁄cuºít_°ªams
;

26 
ngx_uöt_t
 
	m°ªams_ödex_mask
;

27 
ngx_m£c_t
 
	mªcv_timeout
;

28 
ngx_m£c_t
 
	mkì∑live_timeout
;

29 
ngx_öt_t
 
	mhódîs_comp
;

30 } 
	tngx_hâp_•dy_§v_c⁄f_t
;

34 
size_t
 
	mchunk_size
;

35 } 
	tngx_hâp_•dy_loc_c⁄f_t
;

38 
ngx_moduÀ_t
 
ngx_hâp_•dy_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_403
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00001000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

33 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

35 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

36 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

37 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

39 |
NGX_HTTP_UPSTREAM_FT_HTTP_403
 \

40 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

	)

42 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

45 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

46 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

47 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

51 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

52 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

53 
	#NGX_HTTP_UPSTREAM_IGN_VARY
 0x00000200

	)

57 
ngx_m£c_t
 
	mbl_time
;

58 
ngx_uöt_t
 
	mbl_°©e
;

60 
ngx_uöt_t
 
	m°©us
;

61 
time_t
 
	mª•⁄£_£c
;

62 
ngx_uöt_t
 
	mª•⁄£_m£c
;

63 
off_t
 
	mª•⁄£_Àngth
;

65 
ngx_°r_t
 *
	m≥î
;

66 } 
	tngx_hâp_up°ªam_°©e_t
;

70 
ngx_hash_t
 
	mhódîs_ö_hash
;

71 
ngx_¨øy_t
 
	mup°ªams
;

73 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

75 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

77 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

78 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

79 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

80 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

84 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

85 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

86 *
d©a
;

87 } 
	tngx_hâp_up°ªam_≥î_t
;

91 
ngx_°r_t
 
«me
;

92 
ngx_addr_t
 *
addrs
;

93 
ngx_uöt_t
 
«ddrs
;

94 
ngx_uöt_t
 
weight
;

95 
ngx_uöt_t
 
max_Áûs
;

96 
time_t
 
Áû_timeout
;

98 
down
:1;

99 
backup
:1;

100 } 
	tngx_hâp_up°ªam_£rvî_t
;

103 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

104 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

105 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

106 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

107 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

108 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

111 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

112 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

113 **
§v_c⁄f
;

115 
ngx_¨øy_t
 *
£rvîs
;

117 
ngx_uöt_t
 
Êags
;

118 
ngx_°r_t
 
ho°
;

119 
u_ch¨
 *
fûe_«me
;

120 
ngx_uöt_t
 
löe
;

121 
ö_p‹t_t
 
p‹t
;

122 
ö_p‹t_t
 
deÁu…_p‹t
;

123 
ngx_uöt_t
 
no_p‹t
;

128 
ngx_addr_t
 *
addr
;

129 
ngx_hâp_com∂ex_vÆue_t
 *
vÆue
;

130 } 
	tngx_hâp_up°ªam_loˇl_t
;

134 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

136 
ngx_m£c_t
 
c⁄√˘_timeout
;

137 
ngx_m£c_t
 
£nd_timeout
;

138 
ngx_m£c_t
 
ªad_timeout
;

139 
ngx_m£c_t
 
timeout
;

140 
ngx_m£c_t
 
√xt_up°ªam_timeout
;

142 
size_t
 
£nd_low©
;

143 
size_t
 
buf„r_size
;

144 
size_t
 
limô_øã
;

146 
size_t
 
busy_buf„rs_size
;

147 
size_t
 
max_ãmp_fûe_size
;

148 
size_t
 
ãmp_fûe_wrôe_size
;

150 
size_t
 
busy_buf„rs_size_c⁄f
;

151 
size_t
 
max_ãmp_fûe_size_c⁄f
;

152 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

154 
ngx_bufs_t
 
bufs
;

156 
ngx_uöt_t
 
ign‹e_hódîs
;

157 
ngx_uöt_t
 
√xt_up°ªam
;

158 
ngx_uöt_t
 
°‹e_ac˚ss
;

159 
ngx_uöt_t
 
√xt_up°ªam_åõs
;

160 
ngx_Êag_t
 
buf„rög
;

161 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

162 
ngx_Êag_t
 
∑ss_ªque°_body
;

164 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

165 
ngx_Êag_t
 
öãr˚±_îr‹s
;

166 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

167 
ngx_Êag_t
 
f‹˚_ønges
;

169 
ngx_∑th_t
 *
ãmp_∑th
;

171 
ngx_hash_t
 
hide_hódîs_hash
;

172 
ngx_¨øy_t
 *
hide_hódîs
;

173 
ngx_¨øy_t
 *
∑ss_hódîs
;

175 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
;

177 #i‡(
NGX_HTTP_CACHE
)

178 
ngx_shm_z⁄e_t
 *
ˇche
;

180 
ngx_uöt_t
 
ˇche_mö_u£s
;

181 
ngx_uöt_t
 
ˇche_u£_°Æe
;

182 
ngx_uöt_t
 
ˇche_mëhods
;

184 
ngx_Êag_t
 
ˇche_lock
;

185 
ngx_m£c_t
 
ˇche_lock_timeout
;

186 
ngx_m£c_t
 
ˇche_lock_age
;

188 
ngx_Êag_t
 
ˇche_ªvÆid©e
;

190 
ngx_¨øy_t
 *
ˇche_vÆid
;

191 
ngx_¨øy_t
 *
ˇche_by∑ss
;

192 
ngx_¨øy_t
 *
no_ˇche
;

195 
ngx_¨øy_t
 *
°‹e_Àngths
;

196 
ngx_¨øy_t
 *
°‹e_vÆues
;

198 sig√d 
°‹e
:2;

199 
öãr˚±_404
:1;

200 
ch™ge_buf„rög
:1;

202 #i‡(
NGX_HTTP_SSL
)

203 
ngx_s¶_t
 *
s¶
;

204 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

206 
ngx_hâp_com∂ex_vÆue_t
 *
s¶_«me
;

207 
ngx_Êag_t
 
s¶_£rvî_«me
;

208 
ngx_Êag_t
 
s¶_vîify
;

211 
ngx_°r_t
 
moduÀ
;

212 } 
	tngx_hâp_up°ªam_c⁄f_t
;

216 
ngx_°r_t
 
«me
;

217 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

218 
ngx_uöt_t
 
off£t
;

219 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

220 
ngx_uöt_t
 
c⁄f
;

221 
ngx_uöt_t
 
ªdúe˘
;

222 } 
	tngx_hâp_up°ªam_hódî_t
;

226 
ngx_li°_t
 
hódîs
;

228 
ngx_uöt_t
 
°©us_n
;

229 
ngx_°r_t
 
°©us_löe
;

231 
ngx_èbÀ_ñt_t
 *
°©us
;

232 
ngx_èbÀ_ñt_t
 *
d©e
;

233 
ngx_èbÀ_ñt_t
 *
£rvî
;

234 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

236 
ngx_èbÀ_ñt_t
 *
expúes
;

237 
ngx_èbÀ_ñt_t
 *
ëag
;

238 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

239 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

240 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

242 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

243 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

245 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

246 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

247 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

248 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

249 
ngx_èbÀ_ñt_t
 *
å™s„r_ícodög
;

250 
ngx_èbÀ_ñt_t
 *
v¨y
;

252 #i‡(
NGX_HTTP_GZIP
)

253 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

256 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

257 
ngx_¨øy_t
 
cookõs
;

259 
off_t
 
c⁄ã¡_Àngth_n
;

260 
time_t
 
œ°_modifõd_time
;

262 
c⁄√˘i⁄_˛o£
:1;

263 
chunked
:1;

264 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

268 
ngx_°r_t
 
ho°
;

269 
ö_p‹t_t
 
p‹t
;

270 
ngx_uöt_t
 
no_p‹t
;

272 
ngx_uöt_t
 
«ddrs
;

273 
ngx_addr_t
 *
addrs
;

275 
sockaddr
 *sockaddr;

276 
sockÀn_t
 
sockÀn
;

278 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

279 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

282 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

283 
	tngx_hâp_up°ªam_t
 *
	tu
);

286 
	sngx_hâp_up°ªam_s
 {

287 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

288 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

290 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

292 
ngx_evít_pùe_t
 *
pùe
;

294 
ngx_chaö_t
 *
ªque°_bufs
;

296 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

297 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

299 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

301 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

303 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

305 
ngx_buf_t
 
‰om_˛õ¡
;

307 
ngx_buf_t
 
buf„r
;

308 
off_t
 
Àngth
;

310 
ngx_chaö_t
 *
out_bufs
;

311 
ngx_chaö_t
 *
busy_bufs
;

312 
ngx_chaö_t
 *
‰ì_bufs
;

314 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

315 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

316 *
öput_fûãr_˘x
;

318 #i‡(
NGX_HTTP_CACHE
)

319 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

321 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

322 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

323 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

324 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

325 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

326 
ngx_öt_t
 
rc
);

327 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

328 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

329 
	`ngx_öt_t
 (*
ªwrôe_cookõ
)(
ngx_hâp_ªque°_t
 *
r
,

330 
ngx_èbÀ_ñt_t
 *
h
);

332 
ngx_m£c_t
 
timeout
;

334 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

336 
ngx_°r_t
 
mëhod
;

337 
ngx_°r_t
 
schema
;

338 
ngx_°r_t
 
uri
;

340 #i‡(
NGX_HTTP_SSL
)

341 
ngx_°r_t
 
s¶_«me
;

344 
ngx_hâp_˛ónup_±
 *
˛ónup
;

346 
°‹e
:1;

347 
ˇchóbÀ
:1;

348 
ac˚l
:1;

349 
s¶
:1;

350 #i‡(
NGX_HTTP_CACHE
)

351 
ˇche_°©us
:3;

354 
buf„rög
:1;

355 
kì∑live
:1;

356 
upgøde
:1;

358 
ªque°_£¡
:1;

359 
hódî_£¡
:1;

364 
ngx_uöt_t
 
°©us
;

365 
ngx_uöt_t
 
mask
;

366 } 
	tngx_hâp_up°ªam_√xt_t
;

370 
ngx_°r_t
 
key
;

371 
ngx_°r_t
 
vÆue
;

372 
ngx_uöt_t
 
skù_em±y
;

373 } 
	tngx_hâp_up°ªam_∑øm_t
;

376 
ngx_öt_t
 
	`ngx_hâp_up°ªam_cookõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

377 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

378 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

379 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

381 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

382 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

383 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

384 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

385 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

386 *
c⁄f
);

387 *
	`ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

388 *
c⁄f
);

389 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

390 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

391 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

394 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

395 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

398 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

399 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

400 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
sockaddr
 *
	msockaddr
;

19 
sockÀn_t
 
	msockÀn
;

20 
ngx_°r_t
 
	m«me
;

21 
ngx_°r_t
 
	m£rvî
;

23 
ngx_öt_t
 
	mcuºít_weight
;

24 
ngx_öt_t
 
	mef„˘ive_weight
;

25 
ngx_öt_t
 
	mweight
;

27 
ngx_uöt_t
 
	mÁûs
;

28 
time_t
 
	mac˚s£d
;

29 
time_t
 
	mchecked
;

31 
ngx_uöt_t
 
	mmax_Áûs
;

32 
time_t
 
	mÁû_timeout
;

34 
ngx_uöt_t
 
	mdown
;

36 #i‡(
NGX_HTTP_SSL
)

37 
ngx_s¶_£ssi⁄_t
 *
	ms¶_£ssi⁄
;

39 } 
	tngx_hâp_up°ªam_º_≥î_t
;

42 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

44 
	sngx_hâp_up°ªam_º_≥îs_s
 {

45 
ngx_uöt_t
 
	mnumbî
;

49 
ngx_uöt_t
 
	mtŸÆ_weight
;

51 
	msögÀ
:1;

52 
	mweighãd
:1;

54 
ngx_°r_t
 *
	m«me
;

56 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

58 
ngx_hâp_up°ªam_º_≥î_t
 
	m≥î
[1];

63 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

64 
ngx_uöt_t
 
	mcuºít
;

65 
uöçå_t
 *
	måõd
;

66 
uöçå_t
 
	md©a
;

67 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

70 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

71 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

72 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

74 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

76 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

77 *
d©a
);

78 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

79 *
d©a
, 
ngx_uöt_t
 
°©e
);

81 #i‡(
NGX_HTTP_SSL
)

82 
ngx_öt_t


83 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

84 *
d©a
);

85 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

86 *
d©a
);

	@/home/wuhong/github/google/ngx_google/src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

35 
	sngx_hâp_v¨übÀ_s
 {

36 
ngx_°r_t
 
«me
;

37 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

38 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

39 
uöçå_t
 
d©a
;

40 
ngx_uöt_t
 
Êags
;

41 
ngx_uöt_t
 
ödex
;

45 
ngx_hâp_v¨übÀ_t
 *
	`ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

46 
ngx_uöt_t
 
Êags
);

47 
ngx_öt_t
 
	`ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_uöt_t
 
ödex
);

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_uöt_t
 
ödex
);

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

56 
ngx_öt_t
 
	`ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

57 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

60 #i‡(
NGX_PCRE
)

63 
ngx_uöt_t
 
ˇ±uª
;

64 
ngx_öt_t
 
ödex
;

65 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

69 
ngx_ªgex_t
 *
ªgex
;

70 
ngx_uöt_t
 
nˇ±uªs
;

71 
ngx_hâp_ªgex_v¨übÀ_t
 *
v¨übÀs
;

72 
ngx_uöt_t
 
nv¨übÀs
;

73 
ngx_°r_t
 
«me
;

74 } 
	tngx_hâp_ªgex_t
;

78 
ngx_hâp_ªgex_t
 *
ªgex
;

79 *
vÆue
;

80 } 
	tngx_hâp_m≠_ªgex_t
;

83 
ngx_hâp_ªgex_t
 *
	`ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_ªgex_compûe_t
 *
rc
);

85 
ngx_öt_t
 
	`ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

86 
ngx_°r_t
 *
s
);

92 
ngx_hash_comböed_t
 
hash
;

93 #i‡(
NGX_PCRE
)

94 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

95 
ngx_uöt_t
 
ƒegex
;

97 } 
	tngx_hâp_m≠_t
;

100 *
	`ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

101 
ngx_°r_t
 *
m©ch
);

104 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

105 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

109 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@/home/wuhong/github/google/ngx_google/src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 #i‡(
NGX_MAIL_SSL
)

39 
	ms¶
:1;

41 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

42 
	mùv6⁄ly
:1;

44 
	mso_kì∑live
:2;

45 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

46 
	mt˝_kìpidÀ
;

47 
	mt˝_kìpötvl
;

48 
	mt˝_kìp˙t
;

50 } 
	tngx_maû_li°í_t
;

54 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

55 
ngx_°r_t
 
	maddr_ãxt
;

56 #i‡(
NGX_MAIL_SSL
)

57 
ngx_uöt_t
 
	ms¶
;

59 } 
	tngx_maû_addr_c⁄f_t
;

62 
ö_addr_t
 
	maddr
;

63 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

64 } 
	tngx_maû_ö_addr_t
;

67 #i‡(
NGX_HAVE_INET6
)

70 
ö6_addr
 
	maddr6
;

71 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

72 } 
	tngx_maû_ö6_addr_t
;

79 *
	maddrs
;

80 
ngx_uöt_t
 
	m«ddrs
;

81 } 
	tngx_maû_p‹t_t
;

85 
	mÁmûy
;

86 
ö_p‹t_t
 
	mp‹t
;

87 
ngx_¨øy_t
 
	maddrs
;

88 } 
	tngx_maû_c⁄f_p‹t_t
;

92 
sockaddr
 *
	msockaddr
;

93 
sockÀn_t
 
	msockÀn
;

95 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

97 
	mböd
:1;

98 
	mwûdˇrd
:1;

99 #i‡(
NGX_MAIL_SSL
)

100 
	ms¶
:1;

102 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

103 
	mùv6⁄ly
:1;

105 
	mso_kì∑live
:2;

106 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

107 
	mt˝_kìpidÀ
;

108 
	mt˝_kìpötvl
;

109 
	mt˝_kìp˙t
;

111 } 
	tngx_maû_c⁄f_addr_t
;

115 
ngx_¨øy_t
 
	m£rvîs
;

116 
ngx_¨øy_t
 
	mli°í
;

117 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

120 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

121 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

122 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

125 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

129 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

131 
ngx_m£c_t
 
	mtimeout
;

132 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

134 
ngx_Êag_t
 
	mso_kì∑live
;

136 
ngx_°r_t
 
	m£rvî_«me
;

138 
u_ch¨
 *
	mfûe_«me
;

139 
ngx_öt_t
 
	mlöe
;

141 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

144 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

145 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

149 
	mngx_p›3_°¨t
 = 0,

150 
	mngx_p›3_u£r
,

151 
	mngx_p›3_∑sswd
,

152 
	mngx_p›3_auth_logö_u£∫ame
,

153 
	mngx_p›3_auth_logö_∑ssw‹d
,

154 
	mngx_p›3_auth_∂aö
,

155 
	mngx_p›3_auth_¸am_md5


156 } 
	tngx_p›3_°©e_e
;

160 
	mngx_im≠_°¨t
 = 0,

161 
	mngx_im≠_auth_logö_u£∫ame
,

162 
	mngx_im≠_auth_logö_∑ssw‹d
,

163 
	mngx_im≠_auth_∂aö
,

164 
	mngx_im≠_auth_¸am_md5
,

165 
	mngx_im≠_logö
,

166 
	mngx_im≠_u£r
,

167 
	mngx_im≠_∑sswd


168 } 
	tngx_im≠_°©e_e
;

172 
	mngx_smç_°¨t
 = 0,

173 
	mngx_smç_auth_logö_u£∫ame
,

174 
	mngx_smç_auth_logö_∑ssw‹d
,

175 
	mngx_smç_auth_∂aö
,

176 
	mngx_smç_auth_¸am_md5
,

177 
	mngx_smç_hño
,

178 
	mngx_smç_hño_x˛õ¡
,

179 
	mngx_smç_hño_‰om
,

180 
	mngx_smç_x˛õ¡
,

181 
	mngx_smç_x˛õ¡_‰om
,

182 
	mngx_smç_x˛õ¡_hño
,

183 
	mngx_smç_‰om
,

184 
	mngx_smç_to


185 } 
	tngx_smç_°©e_e
;

189 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

190 
ngx_buf_t
 *
	mbuf„r
;

191 } 
	tngx_maû_¥oxy_˘x_t
;

195 
uöt32_t
 
	msig«tuª
;

197 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

199 
ngx_°r_t
 
	mout
;

200 
ngx_buf_t
 *
	mbuf„r
;

202 **
	m˘x
;

203 **
	mmaö_c⁄f
;

204 **
	m§v_c⁄f
;

206 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

208 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

210 
ngx_uöt_t
 
	mmaû_°©e
;

212 
	m¥Ÿocﬁ
:3;

213 
	mblocked
:1;

214 
	mquô
:1;

215 
	mquŸed
:1;

216 
	mback¶ash
:1;

217 
	mno_sync_lôîÆ
:1;

218 
	m°¨âls
:1;

219 
	mesmç
:1;

220 
	mauth_mëhod
:3;

221 
	mauth_waô
:1;

223 
ngx_°r_t
 
	mlogö
;

224 
ngx_°r_t
 
	m∑sswd
;

226 
ngx_°r_t
 
	mß…
;

227 
ngx_°r_t
 
	mèg
;

228 
ngx_°r_t
 
	mègged_löe
;

229 
ngx_°r_t
 
	mãxt
;

231 
ngx_°r_t
 *
	maddr_ãxt
;

232 
ngx_°r_t
 
	mho°
;

233 
ngx_°r_t
 
	msmç_hño
;

234 
ngx_°r_t
 
	msmç_‰om
;

235 
ngx_°r_t
 
	msmç_to
;

237 
ngx_°r_t
 
	mcmd
;

239 
ngx_uöt_t
 
	mcomm™d
;

240 
ngx_¨øy_t
 
	m¨gs
;

242 
ngx_uöt_t
 
	mlogö_©ãm±
;

246 
ngx_uöt_t
 
	m°©e
;

247 
u_ch¨
 *
	mcmd_°¨t
;

248 
u_ch¨
 *
	m¨g_°¨t
;

249 
u_ch¨
 *
	m¨g_íd
;

250 
ngx_uöt_t
 
	mlôîÆ_Àn
;

251 } 
	tngx_maû_£ssi⁄_t
;

255 
ngx_°r_t
 *
	m˛õ¡
;

256 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

257 } 
	tngx_maû_log_˘x_t
;

260 
	#NGX_POP3_USER
 1

	)

261 
	#NGX_POP3_PASS
 2

	)

262 
	#NGX_POP3_CAPA
 3

	)

263 
	#NGX_POP3_QUIT
 4

	)

264 
	#NGX_POP3_NOOP
 5

	)

265 
	#NGX_POP3_STLS
 6

	)

266 
	#NGX_POP3_APOP
 7

	)

267 
	#NGX_POP3_AUTH
 8

	)

268 
	#NGX_POP3_STAT
 9

	)

269 
	#NGX_POP3_LIST
 10

	)

270 
	#NGX_POP3_RETR
 11

	)

271 
	#NGX_POP3_DELE
 12

	)

272 
	#NGX_POP3_RSET
 13

	)

273 
	#NGX_POP3_TOP
 14

	)

274 
	#NGX_POP3_UIDL
 15

	)

277 
	#NGX_IMAP_LOGIN
 1

	)

278 
	#NGX_IMAP_LOGOUT
 2

	)

279 
	#NGX_IMAP_CAPABILITY
 3

	)

280 
	#NGX_IMAP_NOOP
 4

	)

281 
	#NGX_IMAP_STARTTLS
 5

	)

283 
	#NGX_IMAP_NEXT
 6

	)

285 
	#NGX_IMAP_AUTHENTICATE
 7

	)

288 
	#NGX_SMTP_HELO
 1

	)

289 
	#NGX_SMTP_EHLO
 2

	)

290 
	#NGX_SMTP_AUTH
 3

	)

291 
	#NGX_SMTP_QUIT
 4

	)

292 
	#NGX_SMTP_NOOP
 5

	)

293 
	#NGX_SMTP_MAIL
 6

	)

294 
	#NGX_SMTP_RSET
 7

	)

295 
	#NGX_SMTP_RCPT
 8

	)

296 
	#NGX_SMTP_DATA
 9

	)

297 
	#NGX_SMTP_VRFY
 10

	)

298 
	#NGX_SMTP_EXPN
 11

	)

299 
	#NGX_SMTP_HELP
 12

	)

300 
	#NGX_SMTP_STARTTLS
 13

	)

303 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

304 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

305 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

306 
	#NGX_MAIL_AUTH_APOP
 3

	)

307 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

308 
	#NGX_MAIL_AUTH_NONE
 5

	)

311 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

312 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

313 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

314 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

315 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0020

	)

318 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

321 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

322 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

323 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

324 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

325 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

328 
	sngx_maû_¥Ÿocﬁ_s
 {

329 
ngx_°r_t
 
«me
;

330 
ö_p‹t_t
 
p‹t
[4];

331 
ngx_uöt_t
 
ty≥
;

333 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

334 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

335 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

336 
ngx_maû_auth_°©e_±
 
auth_°©e
;

338 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

343 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

345 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

346 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

348 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

349 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

350 *
c⁄f
);

351 } 
	tngx_maû_moduÀ_t
;

354 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

356 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

357 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

360 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

361 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

364 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

365 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

366 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

369 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

370 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

371 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

373 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

374 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

375 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

376 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

379 #i‡(
NGX_MAIL_SSL
)

380 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

381 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

385 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

387 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

388 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

389 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

390 
ngx_uöt_t
 
n
);

391 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

392 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

393 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

394 
ngx_c⁄√˘i⁄_t
 *
c
);

395 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

396 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

397 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

398 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

400 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

401 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

402 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

403 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

404 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

405 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

408 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

412 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

413 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

417 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

418 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_¨øy_t
 *
	m∑ssw‹ds
;

44 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

46 
ngx_Êag_t
 
	m£ssi⁄_tickës
;

47 
ngx_¨øy_t
 *
	m£ssi⁄_tickë_keys
;

49 
u_ch¨
 *
	mfûe
;

50 
ngx_uöt_t
 
	mlöe
;

51 } 
	tngx_maû_s¶_c⁄f_t
;

54 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

24 
AO_t
 
	tngx_©omic_uöt_t
;

25 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

27 #i‡(
NGX_PTR_SIZE
 == 8)

28 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

30 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

33 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

34 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

35 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

36 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

37 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

38 
	#ngx_˝u_∑u£
()

	)

41 #ñi‡(
NGX_DARWIN_ATOMIC
)

48 
	~<libkîn/OSAtomic.h
>

52 #unde‡
boﬁ


56 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

58 #i‡(
NGX_PTR_SIZE
 == 8)

60 
öt64_t
 
	tngx_©omic_öt_t
;

61 
uöt64_t
 
	tngx_©omic_uöt_t
;

62 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

64 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

65 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

67 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

68 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

72 
öt32_t
 
	tngx_©omic_öt_t
;

73 
uöt32_t
 
	tngx_©omic_uöt_t
;

74 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

76 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

77 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

79 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

80 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

84 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

86 
	#ngx_˝u_∑u£
()

	)

88 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

91 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

95 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

97 
	tngx_©omic_öt_t
;

98 
	tngx_©omic_uöt_t
;

100 #i‡(
NGX_PTR_SIZE
 == 8)

101 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

103 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

106 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

109 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

110 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

112 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

113 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

115 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

117 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

118 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

120 
	#ngx_˝u_∑u£
()

	)

124 #ñi‡–
__i386__
 || 
__i386
 )

126 
öt32_t
 
	tngx_©omic_öt_t
;

127 
uöt32_t
 
	tngx_©omic_uöt_t
;

128 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

129 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

132 #i‡–
__SUNPRO_C
 )

134 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

136 
ngx_©omic_uöt_t


137 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

138 
ngx_©omic_uöt_t
 
£t
);

140 
ngx_©omic_öt_t


141 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

149 
ngx_˝u_∑u£
();

153 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

158 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

160 
	~"ngx_gcc_©omic_x86.h
"

165 #ñi‡–
__amd64__
 || 
__amd64
 )

167 
öt64_t
 
	tngx_©omic_öt_t
;

168 
uöt64_t
 
	tngx_©omic_uöt_t
;

169 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

170 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

173 #i‡–
__SUNPRO_C
 )

175 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

177 
ngx_©omic_uöt_t


178 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

179 
ngx_©omic_uöt_t
 
£t
);

181 
ngx_©omic_öt_t


182 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

190 
ngx_˝u_∑u£
();

194 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

199 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

201 
	~"ngx_gcc_©omic_amd64.h
"

206 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

208 #i‡(
NGX_PTR_SIZE
 == 8)

210 
öt64_t
 
	tngx_©omic_öt_t
;

211 
uöt64_t
 
	tngx_©omic_uöt_t
;

212 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

216 
öt32_t
 
	tngx_©omic_öt_t
;

217 
uöt32_t
 
	tngx_©omic_uöt_t
;

218 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

222 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

225 #i‡–
__SUNPRO_C
 )

227 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

229 
	~"ngx_su≈ro_©omic_•¨c64.h
"

234 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

236 
	~"ngx_gcc_©omic_•¨c64.h
"

241 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

243 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

245 #i‡(
NGX_PTR_SIZE
 == 8)

247 
öt64_t
 
	tngx_©omic_öt_t
;

248 
uöt64_t
 
	tngx_©omic_uöt_t
;

249 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

253 
öt32_t
 
	tngx_©omic_öt_t
;

254 
uöt32_t
 
	tngx_©omic_uöt_t
;

255 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

259 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

262 
	~"ngx_gcc_©omic_µc.h
"

267 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

269 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

271 
öt32_t
 
	tngx_©omic_öt_t
;

272 
uöt32_t
 
	tngx_©omic_uöt_t
;

273 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

274 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

277 
ngx_ölöe
 
ngx_©omic_uöt_t


278 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

279 
ngx_©omic_uöt_t
 
£t
)

281 i‡(*
lock
 =
ﬁd
) {

282 *
lock
 = 
£t
;

287 
	}
}

290 
ngx_ölöe
 
ngx_©omic_öt_t


291 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

293 
ngx_©omic_öt_t
 
ﬁd
;

295 
ﬁd
 = *
vÆue
;

296 *
vÆue
 +
add
;

298  
ﬁd
;

299 
	}
}

301 
	#ngx_mem‹y_b¨rõr
()

	)

302 
	#ngx_˝u_∑u£
()

	)

307 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

309 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

310 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_d¨wö_kîn_o§ñd©e
;

17 
ngx_d¨wö_hw_n˝u
;

18 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<öây≥s.h
>

16 
	~<°d¨g.h
>

17 
	~<°ddef.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<°rög.h
>

23 
	~<sig«l.h
>

24 
	~<pwd.h
>

25 
	~<gΩ.h
>

26 
	~<dúít.h
>

27 
	~<glob.h
>

28 
	~<sys/mou¡.h
>

30 
	~<sys/fûio.h
>

31 
	~<sys/io˘l.h
>

32 
	~<sys/uio.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~<sched.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/t˝.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

46 
	~<sys/un.h
>

48 
	~<sys/sys˘l.h
>

49 
	~<xloˇÀ.h
>

52 #i‚de‡
IOV_MAX


53 
	#IOV_MAX
 64

	)

57 
	~<ngx_auto_c⁄fig.h
>

60 #i‡(
NGX_HAVE_POSIX_SEM
)

61 
	~<£m≠h‹e.h
>

65 #i‡(
NGX_HAVE_POLL
)

66 
	~<pﬁl.h
>

70 #i‡(
NGX_HAVE_KQUEUE
)

71 
	~<sys/evít.h
>

75 
	#NGX_LISTEN_BACKLOG
 -1

	)

78 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


79 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

83 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


84 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

88 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

89 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

92 **
ívú⁄
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EXDEV
 
EXDEV


	)

29 
	#NGX_ENOTDIR
 
ENOTDIR


	)

30 
	#NGX_EISDIR
 
EISDIR


	)

31 
	#NGX_EINVAL
 
EINVAL


	)

32 
	#NGX_ENFILE
 
ENFILE


	)

33 
	#NGX_EMFILE
 
EMFILE


	)

34 
	#NGX_ENOSPC
 
ENOSPC


	)

35 
	#NGX_EPIPE
 
EPIPE


	)

36 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

37 
	#NGX_ENOPROTOOPT
 
ENOPROTOOPT


	)

38 
	#NGX_EOPNOTSUPP
 
EOPNOTSUPP


	)

39 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

40 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

41 
	#NGX_ECONNRESET
 
ECONNRESET


	)

42 
	#NGX_ENOTCONN
 
ENOTCONN


	)

43 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

44 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

45 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

46 
	#NGX_ENETDOWN
 
ENETDOWN


	)

47 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

48 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

49 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

50 
	#NGX_ENOSYS
 
ENOSYS


	)

51 
	#NGX_ECANCELED
 
ECANCELED


	)

52 
	#NGX_EILSEQ
 
EILSEQ


	)

53 
	#NGX_ENOMOREFILES
 0

	)

54 
	#NGX_ELOOP
 
ELOOP


	)

55 
	#NGX_EBADF
 
EBADF


	)

57 #i‡(
NGX_HAVE_OPENAT
)

58 
	#NGX_EMLINK
 
EMLINK


	)

61 #i‡(
__hpux__
)

62 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

64 
	#NGX_EAGAIN
 
EAGAIN


	)

68 
	#ngx_î∫o
 
î∫o


	)

69 
	#ngx_sockë_î∫o
 
î∫o


	)

70 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
err

71 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
err

74 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

75 
ngx_öt_t
 
ngx_°ªº‹_öô
();

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


57 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

60 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

61 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

65 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

66 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

70 
	#ngx_›í_fûe_n
 "›í()"

	)

72 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

73 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

74 
	#NGX_FILE_RDWR
 
O_RDWR


	)

75 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

76 
	#NGX_FILE_OPEN
 0

	)

77 
	#NGX_FILE_TRUNCATE
 (
O_CREAT
|
O_TRUNC
)

	)

78 
	#NGX_FILE_APPEND
 (
O_WRONLY
|
O_APPEND
)

	)

79 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

81 #i‡(
NGX_HAVE_OPENAT
)

82 
	#NGX_FILE_NOFOLLOW
 
O_NOFOLLOW


	)

84 #i‡
deföed
(
O_DIRECTORY
)

85 
	#NGX_FILE_DIRECTORY
 
O_DIRECTORY


	)

87 
	#NGX_FILE_DIRECTORY
 0

	)

90 #i‡
deföed
(
O_SEARCH
)

91 
	#NGX_FILE_SEARCH
 (
O_SEARCH
|
NGX_FILE_DIRECTORY
)

	)

93 #ñi‡
deföed
(
O_EXEC
)

94 
	#NGX_FILE_SEARCH
 (
O_EXEC
|
NGX_FILE_DIRECTORY
)

	)

96 #ñi‡(
NGX_HAVE_O_PATH
)

97 
	#NGX_FILE_SEARCH
 (
O_PATH
|
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

100 
	#NGX_FILE_SEARCH
 (
O_RDONLY
|
NGX_FILE_DIRECTORY
)

	)

105 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

106 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

109 
	#ngx_˛o£_fûe
 
˛o£


	)

110 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

113 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

114 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

117 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

118 
ngx_uöt_t
 
ac˚ss
);

119 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

122 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

123 #i‡(
NGX_HAVE_PREAD
)

124 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

126 
	#ngx_ªad_fûe_n
 "ªad()"

	)

129 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

130 
off_t
 
off£t
);

132 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

133 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

136 
	#ngx_ªad_fd
 
ªad


	)

137 
	#ngx_ªad_fd_n
 "ªad()"

	)

144 
ngx_ölöe
 
ssize_t


145 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

147  
	`wrôe
(
fd
, 
buf
, 
n
);

148 
	}
}

150 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

153 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

156 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

157 
	#NGX_LINEFEED_SIZE
 1

	)

158 
	#NGX_LINEFEED
 "\x0a"

	)

161 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

162 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

165 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

166 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

169 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

170 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

173 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

174 
	#ngx_fûe_öfo_n
 "°©()"

	)

176 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

177 
	#ngx_fd_öfo_n
 "f°©()"

	)

179 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

180 
	#ngx_lök_öfo_n
 "l°©()"

	)

182 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

183 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

184 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

185 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

186 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

187 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

188 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

189 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

190 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

193 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

194 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

197 
	#ngx_ªÆ∑th
(
p
, 
r
Ë(
u_ch¨
 *Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

198 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

199 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

200 
	#ngx_gëcwd_n
 "gëcwd()"

	)

201 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

204 #i‡
deföed
(
PATH_MAX
)

206 
	#NGX_HAVE_MAX_PATH
 1

	)

207 
	#NGX_MAX_PATH
 
PATH_MAX


	)

211 
	#NGX_MAX_PATH
 4096

	)

216 
	#NGX_DIR_MASK_LEN
 0

	)

219 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

220 
	#ngx_›í_dú_n
 "›ídú()"

	)

223 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

224 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

227 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

228 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

231 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

232 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

235 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

236 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

239 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

242 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

243 #i‡(
NGX_HAVE_D_NAMLEN
)

244 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

246 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

249 
ngx_ölöe
 
ngx_öt_t


250 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

252 
dú
->
ty≥
 = 0;

253  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

254 
	}
}

256 
	#ngx_de_öfo_n
 "°©()"

	)

257 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

258 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

260 #i‡(
NGX_HAVE_D_TYPE
)

267 
	#ngx_de_is_dú
(
dú
) \

268 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

269 
	#ngx_de_is_fûe
(
dú
) \

270 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

271 
	#ngx_de_is_lök
(
dú
) \

272 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

276 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

277 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

278 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

282 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

283 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

284 
	#ngx_de_fs_size
(
dú
) \

285 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

286 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

289 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

290 
	#ngx_›í_glob_n
 "glob()"

	)

291 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

292 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

295 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

296 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

297 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

299 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

300 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

301 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

304 #i‡(
NGX_HAVE_F_READAHEAD
)

306 
	#NGX_HAVE_READ_AHEAD
 1

	)

308 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

309 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

311 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

313 
	#NGX_HAVE_READ_AHEAD
 1

	)

315 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

316 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

320 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

321 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

326 #i‡(
NGX_HAVE_O_DIRECT
)

328 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

329 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

331 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

332 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

334 #ñi‡(
NGX_HAVE_F_NOCACHE
)

336 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

337 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

339 #ñi‡(
NGX_HAVE_DIRECTIO
)

341 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

342 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

346 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

347 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

351 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

354 #i‡(
NGX_HAVE_OPENAT
)

356 
	#ngx_›í©_fûe
(
fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

357 
	`›í©
(
fd
, (c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

359 
	#ngx_›í©_fûe_n
 "›í©()"

	)

361 
	#ngx_fûe_©_öfo
(
fd
, 
«me
, 
sb
, 
Êag
) \

362 
	`f°©©
(
fd
, (c⁄° *Ë
«me
, 
sb
, 
Êag
)

	)

364 
	#ngx_fûe_©_öfo_n
 "f°©©()"

	)

366 
	#NGX_AT_FDCWD
 (
ngx_fd_t
Ë
AT_FDCWD


	)

371 
	#ngx_°dîr
 
STDERR_FILENO


	)

372 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

373 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

376 #i‡(
NGX_HAVE_FILE_AIO
)

378 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

379 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

381 
ngx_uöt_t
 
ngx_fûe_aio
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_‰ìbsd_kîn_o§ñd©e
;

17 
ngx_‰ìbsd_hw_n˝u
;

18 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

22 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<˘y≥.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<sig«l.h
>

23 
	~<pwd.h
>

24 
	~<gΩ.h
>

25 
	~<dúít.h
>

26 
	~<glob.h
>

27 
	~<time.h
>

28 
	~<sys/∑øm.h
>

29 
	~<sys/mou¡.h
>

31 
	~<sys/fûio.h
>

32 
	~<sys/uio.h
>

33 
	~<sys/°©.h
>

34 
	~<f˙é.h
>

36 
	~<sys/waô.h
>

37 
	~<sys/mm™.h
>

38 
	~<sys/ªsour˚.h
>

39 
	~<sched.h
>

41 
	~<sys/sockë.h
>

42 
	~<√töë/ö.h
>

43 
	~<√töë/t˝.h
>

44 
	~<¨∑/öë.h
>

45 
	~<√tdb.h
>

46 
	~<sys/un.h
>

48 
	~<libutû.h
>

49 
	~<o§ñd©e.h
>

50 
	~<sys/sys˘l.h
>

53 #i‡
__FªeBSD_vîsi⁄
 < 400017

59 #unde‡
CMSG_SPACE


60 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

62 #unde‡
CMSG_LEN


63 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

65 #unde‡
CMSG_DATA


66 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

71 
	~<ngx_auto_c⁄fig.h
>

74 #i‡(
NGX_HAVE_POSIX_SEM
)

75 
	~<£m≠h‹e.h
>

79 #i‡(
NGX_HAVE_POLL
)

80 
	~<pﬁl.h
>

84 #i‡(
NGX_HAVE_KQUEUE
)

85 
	~<sys/evít.h
>

89 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_HAVE_AIO
)

90 
	~<aio.h
>

91 
aiocb
 
	tngx_aiocb_t
;

95 
	#NGX_LISTEN_BACKLOG
 -1

	)

98 #ifde‡
__Døg⁄Fly__


99 
	#NGX_KEEPALIVE_FACTOR
 1000

	)

103 #i‡(
__FªeBSD_vîsi⁄
 < 430000 || __FreeBSD_version < 500012)

105 
pid_t
 
rf‹k_thªad
(
Êags
, *
°ack
, (*
func
)(*
¨g
), *arg);

109 #i‚de‡
IOV_MAX


110 
	#IOV_MAX
 1024

	)

114 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


115 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

119 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

120 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

123 **
ívú⁄
;

124 *
mÆloc_›ti⁄s
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_freebsd_rfork_thread.h

8 #i‚de‡
_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


9 
	#_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


	)

12 
	~<sys/ùc.h
>

13 
	~<sys/£m.h
>

14 
	~<sched.h
>

16 
pid_t
 
	tngx_tid_t
;

18 
	#ngx_log_pid
 
	`ngx_thªad_£lf
()

	)

19 
	#ngx_log_tid
 0

	)

21 
	#NGX_TID_T_FMT
 "%P"

	)

24 
	#NGX_MUTEX_LIGHT
 1

	)

26 
	#NGX_MUTEX_LOCK_BUSY
 0x80000000

	)

29 
ngx_©omic_t
 
	mlock
;

30 
ngx_log_t
 *
	mlog
;

31 
	m£mid
;

32 } 
	tngx_muãx_t
;

35 
	#NGX_CV_SIGNAL
 64

	)

38 
	msigno
;

39 
	mkq
;

40 
ngx_tid_t
 
	mtid
;

41 
ngx_log_t
 *
	mlog
;

42 } 
	tngx_c⁄d_t
;

45 
	#ngx_thªad_sigmask
(
how
, 
£t
, 
o£t
) \

46 (
	`sig¥ocmask
(
how
, 
£t
, 
o£t
Ë=-1Ë? 
ngx_î∫o
 : 0

	)

48 
	#ngx_thªad_sigmask_n
 "sig¥ocmask()"

	)

50 
	#ngx_thªad_joö
(
t
, 
p
)

	)

52 
	#ngx_£âhπôÀ
(
n
Ë
	`£çro˘ôÀ
“)

	)

55 *
ngx_‰ìbsd_kîn_u§°ack
;

56 
size_t
 
ngx_thªad_°ack_size
;

59 
ngx_ölöe
 
ngx_öt_t


60 
	$ngx_gëtid
()

62 *
•
;

64 i‡(
ngx_thªad_°ack_size
 == 0) {

68 #i‡–
__i386__
 )

70 
__asm__
 vﬁ©ûê("mov %%e•, %0" : "=q" (
•
));

72 #ñi‡–
__amd64__
 )

74 
__asm__
 vﬁ©ûê("mov %%r•, %0" : "=q" (
•
));

82  (
ngx_‰ìbsd_kîn_u§°ack
 - 
•
Ë/ 
ngx_thªad_°ack_size
;

83 
	}
}

86 
ngx_tid_t
 
ngx_thªad_£lf
();

89 
ngx_uöt_t
 
	tngx_és_key_t
;

91 
	#NGX_THREAD_KEYS_MAX
 16

	)

93 **
ngx_és
;

95 
ngx_îr_t
 
ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
);

96 
	#ngx_thªad_key_¸óã_n
 "thêé†key cª©i⁄"

	)

98 
ngx_îr_t
 
ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
);

99 
	#ngx_thªad_£t_és_n
 "thêé†key sëtög"

	)

103 
	$ngx_thªad_gë_és
(
ngx_és_key_t
 
key
)

105 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

106  
NULL
;

109  
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()];

110 
	}
}

113 
	#ngx_muãx_åylock
(
m
Ë
	`ngx_muãx_dﬁock
(m, 1)

	)

114 
	#ngx_muãx_lock
(
m
Ë(Ë
	`ngx_muãx_dﬁock
(m, 0)

	)

115 
ngx_öt_t
 
ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
,Çgx_öt_à
åy
);

116 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

119 (*
	tngx_rf‹k_thªad_func_±
)(*
	t¨g
);

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_löux_πsig_max
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<sys/vfs.h
>

35 
	~<sys/uio.h
>

36 
	~<sys/°©.h
>

37 
	~<f˙é.h
>

39 
	~<sys/waô.h
>

40 
	~<sys/mm™.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sched.h
>

44 
	~<sys/sockë.h
>

45 
	~<√töë/ö.h
>

46 
	~<√töë/t˝.h
>

47 
	~<¨∑/öë.h
>

48 
	~<√tdb.h
>

49 
	~<sys/un.h
>

51 
	~<time.h
>

52 
	~<mÆloc.h
>

53 
	~<limôs.h
>

54 
	~<sys/io˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

68 
	~<sys/¥˘l.h
>

72 #i‡(
NGX_HAVE_SENDFILE64
)

73 
	~<sys/£ndfûe.h
>

75 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

76 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

80 #i‡(
NGX_HAVE_POLL
)

81 
	~<pﬁl.h
>

85 #i‡(
NGX_HAVE_RTSIG
)

86 
	~<pﬁl.h
>

87 
	~<sys/sys˘l.h
>

91 #i‡(
NGX_HAVE_EPOLL
)

92 
	~<sys/ïﬁl.h
>

96 #i‡(
NGX_HAVE_FILE_AIO
)

97 #i‡(
NGX_HAVE_SYS_EVENTFD_H
)

98 
	~<sys/evítfd.h
>

100 
	~<sys/sysˇŒ.h
>

101 
	~<löux/aio_abi.h
>

102 
iocb
 
	tngx_aiocb_t
;

106 
	#NGX_LISTEN_BACKLOG
 511

	)

109 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


111 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

115 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


116 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

120 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

121 
	#ngx_debug_öô
()

	)

124 **
ívú⁄
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

21 
	toff_t
 
	tlimô
);

22 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

23 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

24 
	toff_t
 
	tlimô
);

27 
ngx_ªcv_±
 
ªcv
;

28 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

29 
ngx_ªcv_±
 
udp_ªcv
;

30 
ngx_£nd_±
 
£nd
;

31 
ngx_£nd_chaö_±
 
£nd_chaö
;

32 
ngx_uöt_t
 
Êags
;

33 } 
	tngx_os_io_t
;

36 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

37 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

38 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

39 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

41 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
,Çgx_öt_à
pid
);

44 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

45 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
, 
off_t
 
limô
);

46 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

48 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

49 
off_t
 
limô
);

51 #i‡(
NGX_HAVE_AIO
)

52 
ssize_t
 
	`ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

53 
ssize_t
 
	`ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
, 
off_t
 
limô
);

54 
ssize_t
 
	`ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

55 
ngx_chaö_t
 *
	`ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

56 
off_t
 
limô
);

60 #i‡(
IOV_MAX
 > 64)

61 
	#NGX_IOVS_PREALLOCATE
 64

	)

63 
	#NGX_IOVS_PREALLOCATE
 
IOV_MAX


	)

68 
iovec
 *
iovs
;

69 
ngx_uöt_t
 
cou¡
;

70 
size_t
 
size
;

71 
ngx_uöt_t
 
«Œoc
;

72 } 
	tngx_iovec_t
;

74 
ngx_chaö_t
 *
	`ngx_ouçut_chaö_to_iovec
(
ngx_iovec_t
 *
vec
,Çgx_chaö_à*
ö
,

75 
size_t
 
limô
, 
ngx_log_t
 *
log
);

78 
ssize_t
 
	`ngx_wrôev
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_iovec_t
 *
vec
);

81 
ngx_os_io_t
 
ngx_os_io
;

82 
ngx_öt_t
 
ngx_n˝u
;

83 
ngx_öt_t
 
ngx_max_sockës
;

84 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

85 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

88 #i‡(
NGX_FREEBSD
)

89 
	~<ngx_‰ìbsd.h
>

92 #ñi‡(
NGX_LINUX
)

93 
	~<ngx_löux.h
>

96 #ñi‡(
NGX_SOLARIS
)

97 
	~<ngx_sﬁ¨is.h
>

100 #ñi‡(
NGX_DARWIN
)

101 
	~<ngx_d¨wö.h
>

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

15 
	#_HPUX_ALT_XOPEN_SOCKET_API


	)

19 #i‡(
NGX_TRU64
)

20 
	#_REENTRANT


	)

24 #ifde‡
__CYGWIN__


25 
	#timez⁄ev¨


	)

26 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

30 
	~<sys/ty≥s.h
>

31 
	~<sys/time.h
>

32 #i‡(
NGX_HAVE_UNISTD_H
)

33 
	~<uni°d.h
>

35 #i‡(
NGX_HAVE_INTTYPES_H
)

36 
	~<öây≥s.h
>

38 
	~<°d¨g.h
>

39 
	~<°ddef.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<˘y≥.h
>

43 
	~<î∫o.h
>

44 
	~<°rög.h
>

45 
	~<sig«l.h
>

46 
	~<pwd.h
>

47 
	~<gΩ.h
>

48 
	~<dúít.h
>

49 
	~<glob.h
>

50 
	~<time.h
>

51 #i‡(
NGX_HAVE_SYS_PARAM_H
)

52 
	~<sys/∑øm.h
>

54 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

55 
	~<sys/mou¡.h
>

57 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

58 
	~<sys/°©vfs.h
>

61 #i‡(
NGX_HAVE_SYS_FILIO_H
)

62 
	~<sys/fûio.h
>

64 
	~<sys/io˘l.h
>

66 
	~<sys/uio.h
>

67 
	~<sys/°©.h
>

68 
	~<f˙é.h
>

70 
	~<sys/waô.h
>

71 
	~<sys/mm™.h
>

72 
	~<sys/ªsour˚.h
>

73 
	~<sched.h
>

75 
	~<sys/sockë.h
>

76 
	~<√töë/ö.h
>

77 
	~<√töë/t˝.h
>

78 
	~<¨∑/öë.h
>

79 
	~<√tdb.h
>

80 
	~<sys/un.h
>

82 #i‡(
NGX_HAVE_LIMITS_H
)

83 
	~<limôs.h
>

86 #ifde‡
__CYGWIN__


87 
	~<mÆloc.h
>

90 #i‡(
NGX_HAVE_CRYPT_H
)

91 
	~<¸y±.h
>

95 #i‚de‡
IOV_MAX


96 
	#IOV_MAX
 16

	)

100 
	~<ngx_auto_c⁄fig.h
>

103 #i‡(
NGX_HAVE_POSIX_SEM
)

104 
	~<£m≠h‹e.h
>

108 #i‡(
NGX_HAVE_POLL
)

109 
	~<pﬁl.h
>

113 #i‡(
NGX_HAVE_KQUEUE
)

114 
	~<sys/evít.h
>

118 #i‡(
NGX_HAVE_DEVPOLL
)

119 
	~<sys/io˘l.h
>

120 
	~<sys/devpﬁl.h
>

124 #i‡(
NGX_HAVE_FILE_AIO
)

125 
	~<aio.h
>

126 
aiocb
 
	tngx_aiocb_t
;

130 
	#NGX_LISTEN_BACKLOG
 511

	)

132 
	#ngx_debug_öô
()

	)

135 #i‡(
__FªeBSD__
Ë&& (
__FªeBSD_vîsi⁄
 < 400017)

137 
	~<sys/∑øm.h
>

143 #unde‡
CMSG_SPACE


144 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

146 #unde‡
CMSG_LEN


147 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

149 #unde‡
CMSG_DATA


150 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

155 **
ívú⁄
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£èfföôy.h
>

13 
	~<ngx_£çro˘ôÀ.h
>

16 
pid_t
 
	tngx_pid_t
;

18 
	#NGX_INVALID_PID
 -1

	)

20 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

23 
ngx_pid_t
 
pid
;

24 
°©us
;

25 
ngx_sockë_t
 
ch™√l
[2];

27 
ngx_•awn_¥oc_±
 
¥oc
;

28 *
d©a
;

29 *
«me
;

31 
ª•awn
:1;

32 
ju°_•awn
:1;

33 
dëached
:1;

34 
exôög
:1;

35 
exôed
:1;

36 } 
	tngx_¥o˚ss_t
;

40 *
∑th
;

41 *
«me
;

42 *c⁄° *
¨gv
;

43 *c⁄° *
ívp
;

44 } 
	tngx_exec_˘x_t
;

47 
	#NGX_MAX_PROCESSES
 1024

	)

49 
	#NGX_PROCESS_NORESPAWN
 -1

	)

50 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

51 
	#NGX_PROCESS_RESPAWN
 -3

	)

52 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

53 
	#NGX_PROCESS_DETACHED
 -5

	)

56 
	#ngx_gëpid
 
gëpid


	)

58 #i‚de‡
ngx_log_pid


59 
	#ngx_log_pid
 
ngx_pid


	)

63 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

64 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

65 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

67 
	`ngx_debug_poöt
();

70 #i‡(
NGX_HAVE_SCHED_YIELD
)

71 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

73 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

77 
ngx_¨gc
;

78 **
ngx_¨gv
;

79 **
ngx_os_¨gv
;

81 
ngx_pid_t
 
ngx_pid
;

82 
ngx_sockë_t
 
ngx_ch™√l
;

83 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

84 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

85 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_pid_t
 
ngx_pid
;

43 
ngx_pid_t
 
ngx_√w_bö¨y
;

44 
ngx_uöt_t
 
ngx_öhîôed
;

45 
ngx_uöt_t
 
ngx_d´m⁄ized
;

46 
ngx_uöt_t
 
ngx_thªaded
;

47 
ngx_uöt_t
 
ngx_exôög
;

49 
sig_©omic_t
 
ngx_ª≠
;

50 
sig_©omic_t
 
ngx_sigio
;

51 
sig_©omic_t
 
ngx_sigÆrm
;

52 
sig_©omic_t
 
ngx_quô
;

53 
sig_©omic_t
 
ngx_debug_quô
;

54 
sig_©omic_t
 
ngx_ãrmö©e
;

55 
sig_©omic_t
 
ngx_nﬂc˚±
;

56 
sig_©omic_t
 
ngx_ªc⁄figuª
;

57 
sig_©omic_t
 
ngx_ª›í
;

58 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_setaffinity.h

6 #i‚de‡
_NGX_SETAFFINITY_H_INCLUDED_


7 
	#_NGX_SETAFFINITY_H_INCLUDED_


	)

10 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
 || 
NGX_HAVE_CPUSET_SETAFFINITY
)

12 
	#NGX_HAVE_CPU_AFFINITY
 1

	)

14 
ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
);

18 
	#ngx_£èfföôy
(
˝u_afföôy
, 
log
)

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
Ë
NGX_OK


	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
Ë
NGX_OK


	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<˘y≥.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<sig«l.h
>

29 
	~<pwd.h
>

30 
	~<gΩ.h
>

31 
	~<dúít.h
>

32 
	~<glob.h
>

33 
	~<time.h
>

34 
	~<sys/°©vfs.h
>

36 
	~<sys/fûio.h
>

37 
	~<sys/uio.h
>

38 
	~<sys/°©.h
>

39 
	~<f˙é.h
>

41 
	~<sys/waô.h
>

42 
	~<sys/mm™.h
>

43 
	~<sys/ªsour˚.h
>

44 
	~<sched.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<√töë/t˝.h
>

49 
	~<¨∑/öë.h
>

50 
	~<√tdb.h
>

51 
	~<sys/un.h
>

53 
	~<sys/sy°emöfo.h
>

54 
	~<limôs.h
>

55 
	~<öây≥s.h
>

56 
	~<¸y±.h
>

58 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

60 
	~<ngx_auto_c⁄fig.h
>

63 #i‡(
NGX_HAVE_POSIX_SEM
)

64 
	~<£m≠h‹e.h
>

68 #i‡(
NGX_HAVE_POLL
)

69 
	~<pﬁl.h
>

73 #i‡(
NGX_HAVE_DEVPOLL
)

74 
	~<sys/io˘l.h
>

75 
	~<sys/devpﬁl.h
>

79 #i‡(
NGX_HAVE_EVENTPORT
)

80 
	~<p‹t.h
>

84 #i‡(
NGX_HAVE_SENDFILE
)

85 
	~<sys/£ndfûe.h
>

89 
	#NGX_LISTEN_BACKLOG
 511

	)

92 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


93 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

97 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


99 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

103 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

104 
	#ngx_debug_öô
()

	)

107 **
ívú⁄
;

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	#NGX_MAX_THREADS
 128

	)

19 #i‡(
NGX_USE_RFORK
)

20 
	~<ngx_‰ìbsd_rf‹k_thªad.h
>

25 
	~<±hªad.h
>

27 
±hªad_t
 
	tngx_tid_t
;

29 
	#ngx_thªad_£lf
(Ë
	`±hªad_£lf
()

	)

30 
	#ngx_log_tid
 (Ë
	`ngx_thªad_£lf
()

	)

32 #i‡(
NGX_FREEBSD
Ë&& !(
NGX_LINUXTHREADS
)

33 
	#NGX_TID_T_FMT
 "%p"

	)

35 
	#NGX_TID_T_FMT
 "%d"

	)

39 
±hªad_key_t
 
	tngx_és_key_t
;

41 
	#ngx_thªad_key_¸óã
(
key
Ë
	`±hªad_key_¸óã
(key, 
NULL
)

	)

42 
	#ngx_thªad_key_¸óã_n
 "±hªad_key_¸óã()"

	)

43 
	#ngx_thªad_£t_és
 
±hªad_£t•ecific


	)

44 
	#ngx_thªad_£t_és_n
 "±hªad_£t•ecific()"

	)

45 
	#ngx_thªad_gë_és
 
±hªad_gë•ecific


	)

48 
	#NGX_MUTEX_LIGHT
 0

	)

51 
±hªad_muãx_t
 
	mmuãx
;

52 
ngx_log_t
 *
	mlog
;

53 } 
	tngx_muãx_t
;

56 
±hªad_c⁄d_t
 
	mc⁄d
;

57 
ngx_log_t
 *
	mlog
;

58 } 
	tngx_c⁄d_t
;

60 
	#ngx_thªad_sigmask
 
±hªad_sigmask


	)

61 
	#ngx_thªad_sigmask_n
 "±hªad_sigmask()"

	)

63 
	#ngx_thªad_joö
(
t
, 
p
Ë
	`±hªad_joö
—,Ö)

	)

65 
	#ngx_£âhπôÀ
(
n
)

	)

69 
ngx_öt_t
 
ngx_muãx_åylock
(
ngx_muãx_t
 *
m
);

70 
ngx_muãx_lock
(
ngx_muãx_t
 *
m
);

71 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

76 
	#ngx_thªad_vﬁ©ûe
 vﬁ©ûe

	)

80 
ngx_tid_t
 
	mtid
;

81 
ngx_c⁄d_t
 *
	mcv
;

82 
ngx_uöt_t
 
	m°©e
;

83 } 
	tngx_thªad_t
;

85 
	#NGX_THREAD_FREE
 1

	)

86 
	#NGX_THREAD_BUSY
 2

	)

87 
	#NGX_THREAD_EXIT
 3

	)

88 
	#NGX_THREAD_DONE
 4

	)

90 
ngx_öt_t
 
ngx_thªads_n
;

91 vﬁ©ûê
ngx_thªad_t
 
ngx_thªads
[
NGX_MAX_THREADS
];

94 * 
	tngx_thªad_vÆue_t
;

96 
ngx_öt_t
 
ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
);

97 
ngx_îr_t
 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
,

98 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
), *¨g, 
ngx_log_t
 *
log
);

100 
ngx_muãx_t
 *
	`ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
);

101 
	`ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
);

104 
ngx_c⁄d_t
 *
	`ngx_c⁄d_öô
(
ngx_log_t
 *
log
);

105 
	`ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
);

106 
ngx_öt_t
 
	`ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
);

107 
ngx_öt_t
 
	`ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
);

112 
	#ngx_thªad_vﬁ©ûe


	)

114 
	#ngx_log_tid
 0

	)

115 
	#NGX_TID_T_FMT
 "%d"

	)

117 
	#ngx_muãx_åylock
(
m
Ë
NGX_OK


	)

118 
	#ngx_muãx_lock
(
m
)

	)

119 
	#ngx_muãx_u∆ock
(
m
)

	)

121 
	#ngx_c⁄d_sig«l
(
cv
)

	)

123 
	#ngx_thªad_maö
(Ë1

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@/home/wuhong/github/google/ngx_google/src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@
1
.
0
95
6316
/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_filter_module.h
/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_inject.h
/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_request.h
/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_response.h
/home/wuhong/github/google/ngx_google/ngx_http_google_filter_module/src/ngx_http_google_util.h
/home/wuhong/github/google/ngx_google/src/core/nginx.h
/home/wuhong/github/google/ngx_google/src/core/ngx_array.h
/home/wuhong/github/google/ngx_google/src/core/ngx_buf.h
/home/wuhong/github/google/ngx_google/src/core/ngx_conf_file.h
/home/wuhong/github/google/ngx_google/src/core/ngx_config.h
/home/wuhong/github/google/ngx_google/src/core/ngx_connection.h
/home/wuhong/github/google/ngx_google/src/core/ngx_core.h
/home/wuhong/github/google/ngx_google/src/core/ngx_crc.h
/home/wuhong/github/google/ngx_google/src/core/ngx_crc32.h
/home/wuhong/github/google/ngx_google/src/core/ngx_crypt.h
/home/wuhong/github/google/ngx_google/src/core/ngx_cycle.h
/home/wuhong/github/google/ngx_google/src/core/ngx_file.h
/home/wuhong/github/google/ngx_google/src/core/ngx_hash.h
/home/wuhong/github/google/ngx_google/src/core/ngx_inet.h
/home/wuhong/github/google/ngx_google/src/core/ngx_list.h
/home/wuhong/github/google/ngx_google/src/core/ngx_log.h
/home/wuhong/github/google/ngx_google/src/core/ngx_md5.h
/home/wuhong/github/google/ngx_google/src/core/ngx_murmurhash.h
/home/wuhong/github/google/ngx_google/src/core/ngx_open_file_cache.h
/home/wuhong/github/google/ngx_google/src/core/ngx_palloc.h
/home/wuhong/github/google/ngx_google/src/core/ngx_parse.h
/home/wuhong/github/google/ngx_google/src/core/ngx_proxy_protocol.h
/home/wuhong/github/google/ngx_google/src/core/ngx_queue.h
/home/wuhong/github/google/ngx_google/src/core/ngx_radix_tree.h
/home/wuhong/github/google/ngx_google/src/core/ngx_rbtree.h
/home/wuhong/github/google/ngx_google/src/core/ngx_regex.h
/home/wuhong/github/google/ngx_google/src/core/ngx_resolver.h
/home/wuhong/github/google/ngx_google/src/core/ngx_sha1.h
/home/wuhong/github/google/ngx_google/src/core/ngx_shmtx.h
/home/wuhong/github/google/ngx_google/src/core/ngx_slab.h
/home/wuhong/github/google/ngx_google/src/core/ngx_string.h
/home/wuhong/github/google/ngx_google/src/core/ngx_syslog.h
/home/wuhong/github/google/ngx_google/src/core/ngx_times.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event_busy_lock.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event_connect.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event_openssl.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event_pipe.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event_posted.h
/home/wuhong/github/google/ngx_google/src/event/ngx_event_timer.h
/home/wuhong/github/google/ngx_google/src/http/modules/ngx_http_ssi_filter_module.h
/home/wuhong/github/google/ngx_google/src/http/modules/ngx_http_ssl_module.h
/home/wuhong/github/google/ngx_google/src/http/modules/perl/ngx_http_perl_module.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_busy_lock.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_cache.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_config.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_core_module.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_request.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_script.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_spdy.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_spdy_module.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_upstream.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_upstream_round_robin.h
/home/wuhong/github/google/ngx_google/src/http/ngx_http_variables.h
/home/wuhong/github/google/ngx_google/src/mail/ngx_mail.h
/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_imap_module.h
/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_pop3_module.h
/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_smtp_module.h
/home/wuhong/github/google/ngx_google/src/mail/ngx_mail_ssl_module.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_alloc.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_atomic.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_channel.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_darwin.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_darwin_config.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_errno.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_files.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_freebsd.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_freebsd_config.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_freebsd_rfork_thread.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_amd64.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_ppc.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_sparc64.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_gcc_atomic_x86.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_linux.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_linux_config.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_os.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_posix_config.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_process.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_process_cycle.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_setaffinity.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_setproctitle.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_shmem.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_socket.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_solaris.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_solaris_config.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_sunpro_atomic_sparc64.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_thread.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_time.h
/home/wuhong/github/google/ngx_google/src/os/unix/ngx_user.h
